import React, { createContext, useContext, useReducer, useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ShoppingCart, Plus, Minus, Trash2, X, Tag, MapPin, Truck, Clock, Check, AlertCircle } from 'lucide-react';

// Types
interface CartItem {
  id: string;
  name: string;
  nameEn: string;
  price: number;
  originalPrice?: number;
  image: string;
  quantity: number;
  maxStock: number;
  category: string;
  brand: string;
  size?: string;
  color?: string;
}

interface ShippingInfo {
  province: string;
  city: string;
  cost: number;
  deliveryDays: number;
  isExpress: boolean;
}

interface Coupon {
  code: string;
  discount: number;
  type: 'percentage' | 'fixed';
  minAmount?: number;
}

interface CartState {
  items: CartItem[];
  isOpen: boolean;
  coupon: Coupon | null;
  shipping: ShippingInfo | null;
  currency: 'rial' | 'toman';
}

// Sample data
const sampleProducts: CartItem[] = [
  {
    id: '1',
    name: 'شال کشمیر لوکس',
    nameEn: 'Luxury Cashmere Shawl',
    price: 2500000,
    originalPrice: 3000000,
    image: 'https://images.unsplash.com/photo-1544441893-675973e31985?w=400&h=400&fit=crop',
    quantity: 1,
    maxStock: 5,
    category: 'اکسسوری',
    brand: 'برند لوکس',
    color: 'طلایی'
  },
  {
    id: '2',
    name: 'عطر زعفرانی',
    nameEn: 'Saffron Perfume',
    price: 1800000,
    image: 'https://images.unsplash.com/photo-1592945403244-b3fbafd7f539?w=400&h=400&fit=crop',
    quantity: 2,
    maxStock: 10,
    category: 'عطر و ادکلن',
    brand: 'عطرسازی سنتی'
  }
];

const iranianCities = {
  'تهران': ['تهران', 'شمیرانات', 'ری', 'اسلامشهر', 'رباط‌کریم'],
  'اصفهان': ['اصفهان', 'کاشان', 'نجف‌آباد', 'خمینی‌شهر', 'شاهین‌شهر'],
  'شیراز': ['شیراز', 'مرودشت', 'کازرون', 'فسا', 'لامرد'],
  'مشهد': ['مشهد', 'نیشابور', 'سبزوار', 'کاشمر', 'تربت حیدریه']
};

// Cart actions
type CartAction =
  | { type: 'ADD_ITEM'; payload: CartItem }
  | { type: 'REMOVE_ITEM'; payload: string }
  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }
  | { type: 'TOGGLE_CART' }
  | { type: 'APPLY_COUPON'; payload: Coupon }
  | { type: 'REMOVE_COUPON' }
  | { type: 'SET_SHIPPING'; payload: ShippingInfo }
  | { type: 'TOGGLE_CURRENCY' }
  | { type: 'CLEAR_CART' }
  | { type: 'LOAD_CART'; payload: CartState };

// Cart reducer
const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_ITEM':
      const existingItem = state.items.find(item => item.id === action.payload.id);
      if (existingItem) {
        return {
          ...state,
          items: state.items.map(item =>
            item.id === action.payload.id
              ? { ...item, quantity: Math.min(item.quantity + action.payload.quantity, item.maxStock) }
              : item
          )
        };
      }
      return {
        ...state,
        items: [...state.items, action.payload]
      };
    
    case 'REMOVE_ITEM':
      return {
        ...state,
        items: state.items.filter(item => item.id !== action.payload)
      };
    
    case 'UPDATE_QUANTITY':
      return {
        ...state,
        items: state.items.map(item =>
          item.id === action.payload.id
            ? { ...item, quantity: Math.max(0, Math.min(action.payload.quantity, item.maxStock)) }
            : item
        ).filter(item => item.quantity > 0)
      };
    
    case 'TOGGLE_CART':
      return { ...state, isOpen: !state.isOpen };
    
    case 'APPLY_COUPON':
      return { ...state, coupon: action.payload };
    
    case 'REMOVE_COUPON':
      return { ...state, coupon: null };
    
    case 'SET_SHIPPING':
      return { ...state, shipping: action.payload };
    
    case 'TOGGLE_CURRENCY':
      return { ...state, currency: state.currency === 'rial' ? 'toman' : 'rial' };
    
    case 'CLEAR_CART':
      return { ...state, items: [], coupon: null };
    
    case 'LOAD_CART':
      return action.payload;
    
    default:
      return state;
  }
};

// Cart Context
const CartContext = createContext<{
  state: CartState;
  dispatch: React.Dispatch<CartAction>;
} | null>(null);

// Cart Provider
const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, {
    items: [],
    isOpen: false,
    coupon: null,
    shipping: null,
    currency: 'toman'
  });

  // Load cart from localStorage
  useEffect(() => {
    const savedCart = localStorage.getItem('alpha-store-cart');
    if (savedCart) {
      try {
        const parsedCart = JSON.parse(savedCart);
        dispatch({ type: 'LOAD_CART', payload: parsedCart });
      } catch (error) {
        console.error('Failed to load cart:', error);
      }
    }
  }, []);

  // Save cart to localStorage
  useEffect(() => {
    localStorage.setItem('alpha-store-cart', JSON.stringify(state));
  }, [state]);

  return (
    <CartContext.Provider value={{ state, dispatch }}>
      {children}
    </CartContext.Provider>
  );
};

// Custom hook
const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within CartProvider');
  }
  return context;
};

// Currency formatter
const formatCurrency = (amount: number, currency: 'rial' | 'toman' = 'toman') => {
  const value = currency === 'toman' ? amount / 10 : amount;
  const formatter = new Intl.NumberFormat('fa-IR');
  return `${formatter.format(value)} ${currency === 'toman' ? 'تومان' : 'ریال'}`;
};

// Calculate shipping cost
const calculateShipping = (province: string, city: string, isExpress: boolean = false): ShippingInfo => {
  const baseCost = province === 'تهران' ? 50000 : 80000;
  const expressCost = isExpress ? baseCost * 1.5 : baseCost;
  const deliveryDays = province === 'تهران' ? (isExpress ? 1 : 2) : (isExpress ? 2 : 4);
  
  return {
    province,
    city,
    cost: expressCost,
    deliveryDays,
    isExpress
  };
};

// Cart Item Component
const CartItem: React.FC<{ item: CartItem; onUpdate: (id: string, quantity: number) => void; onRemove: (id: string) => void }> = ({ 
  item, 
  onUpdate, 
  onRemove 
}) => {
  const { state } = useCart();
  const [isUpdating, setIsUpdating] = useState(false);

  const handleQuantityChange = async (newQuantity: number) => {
    setIsUpdating(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 300));
    onUpdate(item.id, newQuantity);
    setIsUpdating(false);
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      className="flex items-center gap-4 p-4 bg-white rounded-lg border border-gray-100 shadow-sm"
    >
      <img 
        src={item.image} 
        alt={item.name}
        className="w-16 h-16 rounded-lg object-cover"
      />
      
      <div className="flex-1 text-right">
        <h4 className="font-semibold text-gray-800">{item.name}</h4>
        <p className="text-sm text-gray-500">{item.brand}</p>
        {item.color && <p className="text-xs text-gray-400">رنگ: {item.color}</p>}
        
        <div className="flex items-center justify-between mt-2">
          <div className="flex items-center gap-2">
            <motion.button
              whileTap={{ scale: 0.9 }}
              onClick={() => handleQuantityChange(item.quantity - 1)}
              disabled={isUpdating || item.quantity <= 1}
              className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50"
            >
              <Minus size={14} />
            </motion.button>
            
            <span className="w-8 text-center font-medium">
              {isUpdating ? '...' : item.quantity}
            </span>
            
            <motion.button
              whileTap={{ scale: 0.9 }}
              onClick={() => handleQuantityChange(item.quantity + 1)}
              disabled={isUpdating || item.quantity >= item.maxStock}
              className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50"
            >
              <Plus size={14} />
            </motion.button>
          </div>
          
          <div className="text-right">
            <p className="font-bold text-alpha-600">
              {formatCurrency(item.price * item.quantity, state.currency)}
            </p>
            {item.originalPrice && (
              <p className="text-xs text-gray-400 line-through">
                {formatCurrency(item.originalPrice * item.quantity, state.currency)}
              </p>
            )}
          </div>
        </div>
      </div>
      
      <motion.button
        whileTap={{ scale: 0.9 }}
        onClick={() => onRemove(item.id)}
        className="p-2 text-red-500 hover:bg-red-50 rounded-full transition-colors"
      >
        <Trash2 size={16} />
      </motion.button>
    </motion.div>
  );
};

// Coupon Form Component
const CouponForm: React.FC = () => {
  const { state, dispatch } = useCart();
  const [code, setCode] = useState('');
  const [isApplying, setIsApplying] = useState(false);
  const [message, setMessage] = useState('');

  const sampleCoupons: Coupon[] = [
    { code: 'WELCOME20', discount: 20, type: 'percentage', minAmount: 1000000 },
    { code: 'SAVE50K', discount: 50000, type: 'fixed' }
  ];

  const applyCoupon = async () => {
    if (!code.trim()) return;
    
    setIsApplying(true);
    setMessage('');
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const coupon = sampleCoupons.find(c => c.code === code.toUpperCase());
    
    if (coupon) {
      const subtotal = state.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      
      if (coupon.minAmount && subtotal < coupon.minAmount) {
        setMessage(`حداقل مبلغ خرید برای این کد تخفیف ${formatCurrency(coupon.minAmount, state.currency)} می‌باشد`);
      } else {
        dispatch({ type: 'APPLY_COUPON', payload: coupon });
        setMessage('کد تخفیف با موفقیت اعمال شد!');
        setCode('');
      }
    } else {
      setMessage('کد تخفیف نامعتبر است');
    }
    
    setIsApplying(false);
  };

  const removeCoupon = () => {
    dispatch({ type: 'REMOVE_COUPON' });
    setMessage('');
  };

  return (
    <div className="space-y-3">
      <div className="flex gap-2">
        <input
          type="text"
          value={code}
          onChange={(e) => setCode(e.target.value)}
          placeholder="کد تخفیف"
          className="flex-1 px-3 py-2 border border-gray-200 rounded-lg text-right"
          disabled={state.coupon !== null}
        />
        <motion.button
          whileTap={{ scale: 0.95 }}
          onClick={state.coupon ? removeCoupon : applyCoupon}
          disabled={isApplying}
          className="px-4 py-2 bg-alpha-600 text-white rounded-lg hover:bg-alpha-700 disabled:opacity-50 flex items-center gap-2"
        >
          {isApplying ? (
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
          ) : state.coupon ? (
            <X size={16} />
          ) : (
            <Tag size={16} />
          )}
          {state.coupon ? 'حذف' : 'اعمال'}
        </motion.button>
      </div>
      
      {message && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className={`flex items-center gap-2 text-sm p-2 rounded ${
            message.includes('موفقیت') 
              ? 'bg-green-50 text-green-700' 
              : 'bg-red-50 text-red-700'
          }`}
        >
          {message.includes('موفقیت') ? <Check size={16} /> : <AlertCircle size={16} />}
          {message}
        </motion.div>
      )}
      
      {state.coupon && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200"
        >
          <span className="text-green-700 font-medium">
            {state.coupon.code}
          </span>
          <span className="text-green-700">
            {state.coupon.type === 'percentage' 
              ? `${state.coupon.discount}%` 
              : formatCurrency(state.coupon.discount, state.currency)
            } تخفیف
          </span>
        </motion.div>
      )}
    </div>
  );
};

// Shipping Calculator Component
const ShippingCalculator: React.FC = () => {
  const { state, dispatch } = useCart();
  const [selectedProvince, setSelectedProvince] = useState('');
  const [selectedCity, setSelectedCity] = useState('');
  const [isExpress, setIsExpress] = useState(false);

  useEffect(() => {
    if (selectedProvince && selectedCity) {
      const shippingInfo = calculateShipping(selectedProvince, selectedCity, isExpress);
      dispatch({ type: 'SET_SHIPPING', payload: shippingInfo });
    }
  }, [selectedProvince, selectedCity, isExpress, dispatch]);

  return (
    <div className="space-y-4">
      <h3 className="font-semibold flex items-center gap-2">
        <Truck size={20} />
        محاسبه هزینه ارسال
      </h3>
      
      <div className="grid grid-cols-2 gap-3">
        <select
          value={selectedProvince}
          onChange={(e) => {
            setSelectedProvince(e.target.value);
            setSelectedCity('');
          }}
          className="p-2 border border-gray-200 rounded-lg text-right"
        >
          <option value="">انتخاب استان</option>
          {Object.keys(iranianCities).map(province => (
            <option key={province} value={province}>{province}</option>
          ))}
        </select>
        
        <select
          value={selectedCity}
          onChange={(e) => setSelectedCity(e.target.value)}
          disabled={!selectedProvince}
          className="p-2 border border-gray-200 rounded-lg text-right"
        >
          <option value="">انتخاب شهر</option>
          {selectedProvince && iranianCities[selectedProvince as keyof typeof iranianCities]?.map(city => (
            <option key={city} value={city}>{city}</option>
          ))}
        </select>
      </div>
      
      {selectedCity && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-3"
        >
          <div className="flex items-center gap-3">
            <input
              type="checkbox"
              id="express"
              checked={isExpress}
              onChange={(e) => setIsExpress(e.target.checked)}
              className="rounded"
            />
            <label htmlFor="express" className="text-sm">
              ارسال اکسپرس
            </label>
          </div>
          
          {state.shipping && (
            <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
              <div className="flex items-center justify-between">
                <span className="flex items-center gap-2 text-blue-700">
                  <Clock size={16} />
                  {state.shipping.deliveryDays} روز کاری
                </span>
                <span className="font-medium text-blue-700">
                  {formatCurrency(state.shipping.cost, state.currency)}
                </span>
              </div>
            </div>
          )}
        </motion.div>
      )}
    </div>
  );
};

// Cart Summary Component
const CartSummary: React.FC = () => {
  const { state, dispatch } = useCart();
  
  const subtotal = state.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  
  let discountAmount = 0;
  if (state.coupon) {
    discountAmount = state.coupon.type === 'percentage' 
      ? subtotal * (state.coupon.discount / 100)
      : state.coupon.discount;
  }
  
  const shippingCost = state.shipping?.cost || 0;
  const total = subtotal - discountAmount + shippingCost;
  
  const freeShippingThreshold = 2000000;
  const isFreeShipping = subtotal >= freeShippingThreshold;

  return (
    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
      <div className="flex items-center justify-between">
        <button
          onClick={() => dispatch({ type: 'TOGGLE_CURRENCY' })}
          className="text-sm text-alpha-600 hover:text-alpha-700"
        >
          تبدیل به {state.currency === 'toman' ? 'ریال' : 'تومان'}
        </button>
        <span className="font-semibold">خلاصه سفارش</span>
      </div>
      
      <div className="space-y-2 text-sm">
        <div className="flex justify-between">
          <span>{formatCurrency(subtotal, state.currency)}</span>
          <span>جمع کل کالاها:</span>
        </div>
        
        {state.coupon && (
          <div className="flex justify-between text-green-600">
            <span>-{formatCurrency(discountAmount, state.currency)}</span>
            <span>تخفیف:</span>
          </div>
        )}
        
        <div className="flex justify-between">
          <span>
            {isFreeShipping ? (
              <span className="text-green-600">رایگان</span>
            ) : (
              formatCurrency(shippingCost, state.currency)
            )}
          </span>
          <span>هزینه ارسال:</span>
        </div>
        
        {!isFreeShipping && subtotal > 0 && (
          <div className="text-xs text-gray-500 p-2 bg-blue-50 rounded">
            با {formatCurrency(freeShippingThreshold - subtotal, state.currency)} خرید بیشتر، ارسال رایگان!
          </div>
        )}
      </div>
      
      <div className="pt-2 border-t border-gray-200">
        <div className="flex justify-between font-bold text-lg">
          <span className="text-alpha-600">{formatCurrency(total, state.currency)}</span>
          <span>مبلغ قابل پرداخت:</span>
        </div>
      </div>
    </div>
  );
};

// Cart Drawer Component
const CartDrawer: React.FC = () => {
  const { state, dispatch } = useCart();
  
  const updateQuantity = (id: string, quantity: number) => {
    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });
  };
  
  const removeItem = (id: string) => {
    dispatch({ type: 'REMOVE_ITEM', payload: id });
  };

  return (
    <AnimatePresence>
      {state.isOpen && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => dispatch({ type: 'TOGGLE_CART' })}
            className="fixed inset-0 bg-black bg-opacity-50 z-40"
          />
          
          <motion.div
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'spring', damping: 25, stiffness: 200 }}
            className="fixed right-0 top-0 h-full w-96 bg-white shadow-2xl z-50 flex flex-col"
          >
            <div className="flex items-center justify-between p-4 border-b border-gray-200">
              <motion.button
                whileTap={{ scale: 0.9 }}
                onClick={() => dispatch({ type: 'TOGGLE_CART' })}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                <X size={20} />
              </motion.button>
              
              <h2 className="font-bold text-lg">سبد خرید ({state.items.length})</h2>
              
              <div className="w-10" />
            </div>
            
            <div className="flex-1 overflow-y-auto p-4">
              {state.items.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-gray-500">
                  <ShoppingCart size={48} className="mb-4 opacity-50" />
                  <p className="text-center mb-4">سبد خرید شما خالی است</p>
                  <motion.button
                    whileTap={{ scale: 0.95 }}
                    onClick={() => dispatch({ type: 'TOGGLE_CART' })}
                    className="px-6 py-2 bg-alpha-600 text-white rounded-lg hover:bg-alpha-700 transition-colors"
                  >
                    شروع خرید
                  </motion.button>
                </div>
              ) : (
                <div className="space-y-4">
                  <AnimatePresence>
                    {state.items.map(item => (
                      <CartItem
                        key={item.id}
                        item={item}
                        onUpdate={updateQuantity}
                        onRemove={removeItem}
                      />
                    ))}
                  </AnimatePresence>
                  
                  <CouponForm />
                  <ShippingCalculator />
                  <CartSummary />
                  
                  <motion.button
                    whileTap={{ scale: 0.98 }}
                    className="w-full py-3 bg-alpha-600 text-white rounded-lg hover:bg-alpha-700 transition-colors font-medium"
                  >
                    ادامه فرآیند خرید
                  </motion.button>
                </div>
              )}
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

// Main App Component
const AlphaStoreCart: React.FC = () => {
  const { state, dispatch } = useCart();
  
  const addSampleItem = () => {
    const randomProduct = sampleProducts[Math.floor(Math.random() * sampleProducts.length)];
    dispatch({ type: 'ADD_ITEM', payload: { ...randomProduct, quantity: 1 } });
  };

  return (
    <div className="min-h-screen bg-gray-50" dir="rtl">
      {/* Header with Cart */}
      <header className="bg-white shadow-sm p-4">
        <div className="max-w-6xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-6">
            <motion.button
              whileTap={{ scale: 0.95 }}
              onClick={() => dispatch({ type: 'TOGGLE_CART' })}
              className="relative p-2 bg-alpha-50 text-alpha-600 rounded-lg hover:bg-alpha-100 transition-colors"
            >
              <ShoppingCart size={20} />
              {state.items.length > 0 && (
                <motion.span
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
                >
                  {state.items.reduce((sum, item) => sum + item.quantity, 0)}
                </motion.span>
              )}
            </motion.button>
            
            <motion.button
              whileTap={{ scale: 0.95 }}
              onClick={addSampleItem}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              افزودن کالا (تست)
            </motion.button>
            
            <motion.button
              whileTap={{ scale: 0.95 }}
              onClick={() => dispatch({ type: 'CLEAR_CART' })}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              پاک کردن سبد
            </motion.button>
          </div>
          
          <div className="flex items-center gap-2">
            <div className="text-2xl font-bold text-alpha-600">Α</div>
            <span className="text-xl font-bold">Store</span>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-6xl mx-auto p-6">
        <div className="text-center py-12">
          <h1 className="text-3xl font-bold text-gray-800 mb-4">
            سیستم سبد خرید Α Store
          </h1>
          <p className="text-gray-600 mb-8">
            سیستم کاملی برای مدیریت سبد خرید با پشتیبانی از RTL، انیمیشن‌ها و محاسبات پیشرفته
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-right">
            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
              <ShoppingCart size={32} className="text-alpha-600 mb-4 mr-auto ml-0" />
              <h3 className="font-semibold mb-2">مدیریت سبد خرید</h3>
              <p className="text-sm text-gray-600">
                افزودن، حذف و بروزرسانی کالاها با انیمیشن‌های روان
              </p>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
              <Tag size={32} className="text-green-600 mb-4 mr-auto ml-0" />
              <h3 className="font-semibold mb-2">سیستم تخفیف</h3>
              <p className="text-sm text-gray-600">
                اعمال کدهای تخفیف با اعتبارسنجی و پیام‌های فارسی
              </p>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-100">
              <Truck size={32} className="text-blue-600 mb-4 mr-auto ml-0" />
              <h3 className="font-semibold mb-2">محاسبه ارسال</h3>
              <p className="text-sm text-gray-600">
                محاسبه هزینه ارسال برای شهرهای مختلف ایران
              </p>
            </div>
          </div>
          
          <div className="mt-12 p-6 bg-white rounded-lg shadow-sm border border-gray-100">
            <h3 className="font-semibold mb-4 text-right">ویژگی‌های پیاده‌سازی شده:</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-right text-sm">
              <ul className="space-y-2">
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>مدیریت state با Context API</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>ذخیره‌سازی در localStorage</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>انیمیشن‌های Framer Motion</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>پشتیبانی کامل از RTL</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>تبدیل ریال/تومان</span>
                </li>
              </ul>
              <ul className="space-y-2">
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>اعتبارسنجی موجودی کالا</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>سیستم کوپن تخفیف</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>محاسبه ارسال ایرانی</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>ارسال رایگان بر اساس مبلغ</span>
                </li>
                <li className="flex items-center gap-2">
                  <Check size={16} className="text-green-600" />
                  <span>فرمت‌بندی فارسی اعداد</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </main>

      {/* Cart Drawer */}
      <CartDrawer />
    </div>
  );
};

// Main App with Provider
const App: React.FC = () => {
  return (
    <CartProvider>
      <AlphaStoreCart />
      
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        * {
          font-family: 'Inter', 'Tahoma', sans-serif;
        }
        
        .alpha-600 { color: #7c3aed; }
        .bg-alpha-600 { background-color: #7c3aed; }
        .bg-alpha-700 { background-color: #6d28d9; }
        .bg-alpha-50 { background-color: #f3f4f6; }
        .bg-alpha-100 { background-color: #e5e7eb; }
        .text-alpha-600 { color: #7c3aed; }
        .text-alpha-700 { color: #6d28d9; }
        .hover\\:bg-alpha-700:hover { background-color: #6d28d9; }
        .hover\\:bg-alpha-100:hover { background-color: #e5e7eb; }
        .hover\\:text-alpha-700:hover { color: #6d28d9; }
        
        /* RTL Scrollbar */
        ::-webkit-scrollbar {
          width: 8px;
        }
        
        ::-webkit-scrollbar-track {
          background: #f1f1f1;
          border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb {
          background: #c1c1c1;
          border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
          background: #a1a1a1;
        }
        
        /* Persian number formatting */
        .persian-numbers {
          font-feature-settings: "pnum" on, "lnum" on;
        }
        
        /* Smooth transitions */
        * {
          transition: all 0.2s ease-in-out;
        }
        
        /* Input focus styles */
        input:focus, select:focus {
          outline: none;
          border-color: #7c3aed;
          box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
        }
        
        /* Button hover effects */
        button:disabled {
          cursor: not-allowed;
          opacity: 0.6;
        }
        
        /* Loading animation */
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        
        .animate-spin {
          animation: spin 1s linear infinite;
        }
        
        /* Custom checkbox */
        input[type="checkbox"]:checked {
          background-color: #7c3aed;
          border-color: #7c3aed;
        }
        
        /* Mobile responsive adjustments */
        @media (max-width: 640px) {
          .w-96 {
            width: 100vw;
          }
        }
      `}</style>
    </CartProvider>
  );
};

export default App;
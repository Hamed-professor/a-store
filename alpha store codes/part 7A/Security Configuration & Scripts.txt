# Alpha Store Security Configuration & Scripts

# =================================================================
# 1. Security Headers Configuration (/etc/nginx/security/security.conf)
# =================================================================

# Hide Nginx version
server_tokens off;

# Security headers
more_set_headers "Server: Alpha Store";
more_set_headers "X-Powered-By: ";

# Clickjacking protection
add_header X-Frame-Options DENY always;

# MIME type sniffing protection
add_header X-Content-Type-Options nosniff always;

# XSS protection
add_header X-XSS-Protection "1; mode=block" always;

# Referrer policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Feature policy / Permissions policy
add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()" always;

# =================================================================
# 2. SSL Configuration (/etc/nginx/ssl/ssl.conf)
# =================================================================

# SSL protocols and ciphers
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;

# SSL session settings
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
ssl_session_tickets off;

# OCSP stapling
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/letsencrypt/live/alphastore.ir/chain.pem;

# DNS resolvers for OCSP
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

# Diffie-Hellman parameters
ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# =================================================================
# 3. Firewall Rules Script (/security/firewall-rules.sh)
# =================================================================

#!/bin/bash
# Alpha Store Firewall Configuration

set -euo pipefail

echo "Configuring firewall rules for Alpha Store..."

# Reset iptables
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X

# Default policies
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

# Allow loopback
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# Allow established connections
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow SSH (change port as needed)
iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -m limit --limit 5/min --limit-burst 3 -j ACCEPT

# Allow HTTP and HTTPS
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT

# Allow MongoDB (only from Docker network)
iptables -A INPUT -p tcp --dport 27017 -s 172.20.0.0/16 -j ACCEPT

# Allow Redis (only from Docker network)
iptables -A INPUT -p tcp --dport 6379 -s 172.20.0.0/16 -j ACCEPT

# Allow monitoring ports (only localhost)
iptables -A INPUT -p tcp --dport 9090 -s 127.0.0.1 -j ACCEPT  # Prometheus
iptables -A INPUT -p tcp --dport 3001 -s 127.0.0.1 -j ACCEPT  # Grafana

# Rate limiting for HTTP/HTTPS
iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/min --limit-burst 100 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -m limit --limit 25/min --limit-burst 100 -j ACCEPT

# Drop invalid packets
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP

# Log dropped packets
iptables -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

# Save rules
iptables-save > /etc/iptables/rules.v4

echo "Firewall rules configured successfully!"

# =================================================================
# 4. Fail2Ban Configuration (/security/fail2ban.conf)
# =================================================================

[DEFAULT]
# Ban settings
bantime = 3600
findtime = 600
maxretry = 5
backend = auto
usedns = warn

# Email settings
destemail = admin@alphastore.ir
sendername = Alpha Store Security
mta = sendmail

[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 7200

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 3
bantime = 3600

[nginx-noscript]
enabled = true
port = http,https
filter = nginx-noscript
logpath = /var/log/nginx/access.log
maxretry = 6
bantime = 86400

[nginx-badbots]
enabled = true
port = http,https
filter = nginx-badbots
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 86400

[nginx-noproxy]
enabled = true
port = http,https
filter = nginx-noproxy
logpath = /var/log/nginx/access.log
maxretry = 2
bantime = 86400

[alpha-store-api]
enabled = true
port = http,https
filter = alpha-store-api
logpath = /var/log/nginx/access.log
maxretry = 10
findtime = 300
bantime = 1800

# =================================================================
# 5. SSL Setup Script (/scripts/ssl-setup.sh)
# =================================================================

#!/bin/bash
# Alpha Store SSL Certificate Setup

set -euo pipefail

DOMAIN="alphastore.ir"
EMAIL="admin@alphastore.ir"

echo "Setting up SSL certificates for Alpha Store..."

# Install Certbot
if ! command -v certbot &> /dev/null; then
    echo "Installing Certbot..."
    apt-get update
    apt-get install -y certbot python3-certbot-nginx
fi

# Generate Diffie-Hellman parameters
if [ ! -f /etc/nginx/ssl/dhparam.pem ]; then
    echo "Generating Diffie-Hellman parameters..."
    mkdir -p /etc/nginx/ssl
    openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
fi

# Obtain certificates for main domain
echo "Obtaining SSL certificate for $DOMAIN..."
certbot certonly --nginx \
    --email $EMAIL \
    --agree-tos \
    --no-eff-email \
    --domains $DOMAIN,www.$DOMAIN

# Obtain certificates for subdomains
echo "Obtaining SSL certificate for admin subdomain..."
certbot certonly --nginx \
    --email $EMAIL \
    --agree-tos \
    --no-eff-email \
    --domains admin.$DOMAIN

echo "Obtaining SSL certificate for API subdomain..."
certbot certonly --nginx \
    --email $EMAIL \
    --agree-tos \
    --no-eff-email \
    --domains api.$DOMAIN

# Setup auto-renewal
echo "Setting up auto-renewal..."
echo "0 12 * * * /usr/bin/certbot renew --quiet --post-hook 'docker exec alpha-store-nginx nginx -s reload'" | crontab -

echo "SSL certificates configured successfully!"

# =================================================================
# 6. Deployment Script (/scripts/deploy.sh)
# =================================================================

#!/bin/bash
# Alpha Store Production Deployment Script

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
BACKUP_DIR="/backups/alpha-store"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    error "Please run this script as root"
    exit 1
fi

# Check required commands
check_dependencies() {
    local deps=("docker" "docker-compose" "nginx" "certbot")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            error "$dep is required but not installed"
            exit 1
        fi
    done
}

# Create backup
create_backup() {
    log "Creating backup..."
    mkdir -p "$BACKUP_DIR"
    
    # Backup database
    if docker ps | grep -q alpha-store-mongodb; then
        log "Backing up MongoDB..."
        docker exec alpha-store-mongodb mongodump --out "/data/backups/backup_$TIMESTAMP"
    fi
    
    # Backup uploads
    if [ -d "$PROJECT_ROOT/uploads" ]; then
        log "Backing up uploads..."
        tar -czf "$BACKUP_DIR/uploads_$TIMESTAMP.tar.gz" -C "$PROJECT_ROOT" uploads
    fi
    
    # Backup configuration
    log "Backing up configuration..."
    tar -czf "$BACKUP_DIR/config_$TIMESTAMP.tar.gz" -C "$PROJECT_ROOT" .env.production config/
    
    success "Backup created successfully"
}

# Setup environment
setup_environment() {
    log "Setting up environment..."
    
    # Copy environment file if it doesn't exist
    if [ ! -f "$PROJECT_ROOT/.env.production" ]; then
        warning ".env.production not found, creating from template..."
        cp "$PROJECT_ROOT/.env.production.template" "$PROJECT_ROOT/.env.production"
        error "Please edit .env.production with your configuration and run again"
        exit 1
    fi
    
    # Create necessary directories
    mkdir -p "$PROJECT_ROOT"/{logs/{nginx,frontend,backend,admin},uploads,backups/{mongodb,files}}
    mkdir -p /var/log/alpha-store
    
    # Set proper permissions
    chown -R www-data:www-data "$PROJECT_ROOT/uploads"
    chown -R syslog:adm "$PROJECT_ROOT/logs"
    chmod -R 755 "$PROJECT_ROOT/logs"
    
    success "Environment setup completed"
}

# Configure firewall
configure_firewall() {
    log "Configuring firewall..."
    bash "$PROJECT_ROOT/security/firewall-rules.sh"
    success "Firewall configured"
}

# Setup SSL certificates
setup_ssl() {
    log "Setting up SSL certificates..."
    bash "$PROJECT_ROOT/scripts/ssl-setup.sh"
    success "SSL certificates configured"
}

# Deploy application
deploy_application() {
    log "Deploying Alpha Store application..."
    
    cd "$PROJECT_ROOT"
    
    # Pull latest images
    log "Pulling latest Docker images..."
    docker-compose -f docker-compose.prod.yml pull
    
    # Build custom images
    log "Building custom images..."
    docker-compose -f docker-compose.prod.yml build --no-cache
    
    # Stop existing containers
    log "Stopping existing containers..."
    docker-compose -f docker-compose.prod.yml down
    
    # Start new containers
    log "Starting new containers..."
    docker-compose -f docker-compose.prod.yml up -d
    
    # Wait for services to be ready
    log "Waiting for services to be ready..."
    sleep 30
    
    # Run health checks
    check_health
    
    success "Application deployed successfully"
}

# Health check
check_health() {
    log "Running health checks..."
    
    local services=("frontend:3000" "backend:4000" "admin:3000")
    local failed=0
    
    for service in "${services[@]}"; do
        local name=${service%:*}
        local port=${service#*:}
        
        if docker exec "alpha-store-$name" curl -f "http://localhost:$port/api/health" &>/dev/null; then
            success "$name service is healthy"
        else
            error "$name service health check failed"
            ((failed++))
        fi
    done
    
    # Check external endpoints
    if curl -f -k "https://alphastore.ir/health" &>/dev/null; then
        success "Main site is accessible"
    else
        error "Main site health check failed"
        ((failed++))
    fi
    
    if [ $failed -eq 0 ]; then
        success "All health checks passed"
    else
        error "$failed health check(s) failed"
        return 1
    fi
}

# Setup monitoring
setup_monitoring() {
    log "Setting up monitoring..."
    
    # Configure log rotation
    cat > /etc/logrotate.d/alpha-store << EOF
/var/log/alpha-store/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 www-data adm
    postrotate
        docker exec alpha-store-nginx nginx -s reload
    endscript
}
EOF
    
    # Setup monitoring alerts
    if [ -f "$PROJECT_ROOT/monitoring/alerting-rules.yml" ]; then
        log "Configuring alerting rules..."
        docker exec alpha-store-prometheus promtool check rules /etc/prometheus/alerting-rules.yml
    fi
    
    success "Monitoring configured"
}

# Main deployment process
main() {
    log "Starting Alpha Store production deployment..."
    
    check_dependencies
    create_backup
    setup_environment
    configure_firewall
    setup_ssl
    deploy_application
    setup_monitoring
    
    success "Alpha Store deployment completed successfully!"
    log "Access your store at: https://alphastore.ir"
    log "Access admin panel at: https://admin.alphastore.ir"
    log "Monitoring dashboard at: http://localhost:3001"
}

# Trap errors
trap 'error "Deployment failed at line $LINENO"' ERR

# Parse command line arguments
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "backup")
        create_backup
        ;;
    "health")
        check_health
        ;;
    "ssl")
        setup_ssl
        ;;
    *)
        echo "Usage: $0 {deploy|backup|health|ssl}"
        exit 1
        ;;
esac

# =================================================================
# 7. Health Check Script (/scripts/health-check.sh)
# =================================================================

#!/bin/bash
# Alpha Store Health Check Script

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Configuration
ENDPOINTS=(
    "https://alphastore.ir/health:Main Site"
    "https://admin.alphastore.ir/health:Admin Panel"
    "https://api.alphastore.ir/health:API"
)

DOCKER_SERVICES=(
    "alpha-store-nginx"
    "alpha-store-frontend"
    "alpha-store-backend"
    "alpha-store-admin"
    "alpha-store-mongodb"
    "alpha-store-redis"
)

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

check_endpoint() {
    local url=$1
    local name=$2
    local timeout=10
    
    if curl -f -s --max-time $timeout "$url" > /dev/null 2>&1; then
        echo -e "${GREEN}✓${NC} $name is healthy"
        return 0
    else
        echo -e "${RED}✗${NC} $name is not responding"
        return 1
    fi
}

check_docker_service() {
    local service=$1
    
    if docker ps --filter "name=$service" --filter "status=running" | grep -q "$service"; then
        echo -e "${GREEN}✓${NC} $service is running"
        return 0
    else
        echo -e "${RED}✗${NC} $service is not running"
        return 1
    fi
}

check_database_connection() {
    if docker exec alpha-store-backend node -e "
        const { MongoClient } = require('mongodb');
        const client = new MongoClient(process.env.MONGODB_URI);
        client.connect().then(() => {
            console.log('Database connection successful');
            client.close();
            process.exit(0);
        }).catch(err => {
            console.error('Database connection failed:', err.message);
            process.exit(1);
        });
    " 2>/dev/null; then
        echo -e "${GREEN}✓${NC} Database connection is healthy"
        return 0
    else
        echo -e "${RED}✗${NC} Database connection failed"
        return 1
    fi
}

check_redis_connection() {
    if docker exec alpha-store-redis redis-cli ping | grep -q "PONG"; then
        echo -e "${GREEN}✓${NC} Redis connection is healthy"
        return 0
    else
        echo -e "${RED}✗${NC} Redis connection failed"
        return 1
    fi
}

check_ssl_certificates() {
    local domains=("alphastore.ir" "admin.alphastore.ir" "api.alphastore.ir")
    local failed=0
    
    for domain in "${domains[@]}"; do
        local cert_file="/etc/letsencrypt/live/$domain/fullchain.pem"
        if [ -f "$cert_file" ]; then
            local expiry=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
            local expiry_epoch=$(date -d "$expiry" +%s)
            local now_epoch=$(date +%s)
            local days_left=$(( (expiry_epoch - now_epoch) / 86400 ))
            
            if [ $days_left -gt 30 ]; then
                echo -e "${GREEN}✓${NC} SSL certificate for $domain expires in $days_left days"
            elif [ $days_left -gt 7 ]; then
                echo -e "${YELLOW}⚠${NC} SSL certificate for $domain expires in $days_left days"
            else
                echo -e "${RED}✗${NC} SSL certificate for $domain expires in $days_left days (URGENT)"
                ((failed++))
            fi
        else
            echo -e "${RED}✗${NC} SSL certificate for $domain not found"
            ((failed++))
        fi
    done
    
    return $failed
}

check_disk_space() {
    local usage=$(df /var/lib/docker | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ "$usage" -lt 80 ]; then
        echo -e "${GREEN}✓${NC} Disk space usage: ${usage}%"
        return 0
    elif [ "$usage" -lt 90 ]; then
        echo -e "${YELLOW}⚠${NC} Disk space usage: ${usage}% (Warning)"
        return 1
    else
        echo -e "${RED}✗${NC} Disk space usage: ${usage}% (Critical)"
        return 1
    fi
}

main() {
    echo "Alpha Store Health Check Report"
    echo "==============================="
    echo "Timestamp: $(date)"
    echo ""
    
    local failed=0
    
    # Check Docker services
    echo "Docker Services:"
    for service in "${DOCKER_SERVICES[@]}"; do
        check_docker_service "$service" || ((failed++))
    done
    echo ""
    
    # Check endpoints
    echo "Web Endpoints:"
    for endpoint_info in "${ENDPOINTS[@]}"; do
        IFS=':' read -r url name <<< "$endpoint_info"
        check_endpoint "$url" "$name" || ((failed++))
    done
    echo ""
    
    # Check database connections
    echo "Database Connections:"
    check_database_connection || ((failed++))
    check_redis_connection || ((failed++))
    echo ""
    
    # Check SSL certificates
    echo "SSL Certificates:"
    check_ssl_certificates || ((failed++))
    echo ""
    
    # Check system resources
    echo "System Resources:"
    check_disk_space || ((failed++))
    echo ""
    
    # Summary
    if [ $failed -eq 0 ]; then
        echo -e "${GREEN}✓ All health checks passed${NC}"
        exit 0
    else
        echo -e "${RED}✗ $failed health check(s) failed${NC}"
        exit 1
    fi
}

main "$@"
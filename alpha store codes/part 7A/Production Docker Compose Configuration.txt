version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    container_name: alpha-store-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/security:/etc/nginx/security:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./logs/nginx:/var/log/nginx
      - frontend_assets:/var/www/html
    depends_on:
      - frontend
      - backend
    networks:
      - alpha-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ../alpha-store-frontend
      dockerfile: ../alpha-store-production/docker/Dockerfile.frontend
    container_name: alpha-store-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.alphastore.ir
      - NEXT_PUBLIC_DOMAIN=alphastore.ir
      - NEXT_PUBLIC_CDN_URL=https://cdn.alphastore.ir
    volumes:
      - frontend_assets:/app/.next/static
      - ./logs/frontend:/app/logs
    networks:
      - alpha-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: ../alpha-store-backend
      dockerfile: ../alpha-store-production/docker/Dockerfile.backend
    container_name: alpha-store-backend
    environment:
      - NODE_ENV=production
      - PORT=4000
      - MONGODB_URI=mongodb://mongodb:27017/alphastore_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - PAYMENT_GATEWAY_KEY=${PAYMENT_GATEWAY_KEY}
      - EMAIL_SERVICE_KEY=${EMAIL_SERVICE_KEY}
      - SMS_SERVICE_KEY=${SMS_SERVICE_KEY}
      - DOMAIN=alphastore.ir
      - CORS_ORIGIN=https://alphastore.ir,https://admin.alphastore.ir
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
      - ./config:/app/config
    depends_on:
      - mongodb
      - redis
    networks:
      - alpha-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Admin Panel
  admin:
    build:
      context: ../alpha-store-admin
      dockerfile: ../alpha-store-production/docker/Dockerfile.frontend
    container_name: alpha-store-admin
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.alphastore.ir
      - NEXT_PUBLIC_DOMAIN=admin.alphastore.ir
      - NEXT_PUBLIC_ADMIN_MODE=true
    volumes:
      - admin_assets:/app/.next/static
      - ./logs/admin:/app/logs
    networks:
      - alpha-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: alpha-store-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=alphastore_prod
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backups/mongodb:/data/backups
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "127.0.0.1:27017:27017"
    networks:
      - alpha-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: --wiredTigerCacheSizeGB 0.5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: alpha-store-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - alpha-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: alpha-store-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerting-rules.yml:/etc/prometheus/alerting-rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - alpha-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: alpha-store-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/dashboard.json:ro
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - alpha-network
    restart: unless-stopped

  # Log Aggregation
  filebeat:
    image: elastic/filebeat:8.5.0
    container_name: alpha-store-filebeat
    user: root
    volumes:
      - ./logs:/var/log/alphastore:ro
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - alpha-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  frontend_assets:
    driver: local
  admin_assets:
    driver: local

networks:
  alpha-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
// === PART 1B: Î± Store UI Component Library ===

// types/ui.ts
export interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
  'data-testid'?: string;
}

export type Size = 'sm' | 'md' | 'lg' | 'xl';
export type Variant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger' | 'default';

export interface ButtonProps extends BaseComponentProps {
  variant?: Variant;
  size?: Size;
  disabled?: boolean;
  loading?: boolean;
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
}

export interface InputProps extends BaseComponentProps {
  variant?: 'default' | 'filled' | 'outlined';
  type?: 'text' | 'email' | 'password' | 'number' | 'phone';
  label?: string;
  placeholder?: string;
  error?: string;
  helperText?: string;
  icon?: React.ReactNode;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  disabled?: boolean;
  required?: boolean;
  dir?: 'ltr' | 'rtl';
}

export interface CardProps extends BaseComponentProps {
  variant?: 'default' | 'elevated' | 'outlined' | 'dark';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  hoverable?: boolean;
  loading?: boolean;
  onClick?: () => void;
}

export interface ModalProps extends BaseComponentProps {
  isOpen: boolean;
  onClose: () => void;
  size?: Size | 'full';
  title?: string;
  showCloseButton?: boolean;
}

export interface ToastProps {
  id: string;
  message: string;
  type: 'success' | 'error' | 'warning' | 'info';
  duration?: number;
  onClose: (id: string) => void;
  dir?: 'ltr' | 'rtl';
}

// utils/animations.ts
import { Variants } from 'framer-motion';

export const buttonAnimations: Variants = {
  idle: { scale: 1, y: 0 },
  hover: { scale: 1.02, y: -2, transition: { duration: 0.2 } },
  tap: { scale: 0.98, y: 0, transition: { duration: 0.1 } }
};

export const cardAnimations: Variants = {
  idle: { scale: 1, y: 0, boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' },
  hover: { 
    scale: 1.02, 
    y: -4, 
    boxShadow: '0 8px 25px rgba(212, 175, 55, 0.15)',
    transition: { duration: 0.3 }
  }
};

export const modalAnimations: Variants = {
  hidden: { opacity: 0, scale: 0.8, y: 20 },
  visible: { 
    opacity: 1, 
    scale: 1, 
    y: 0,
    transition: { duration: 0.3, ease: 'easeOut' }
  },
  exit: { 
    opacity: 0, 
    scale: 0.8, 
    y: 20,
    transition: { duration: 0.2 }
  }
};

export const fadeInUp: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0, transition: { duration: 0.3 } }
};

export const slideIn: Variants = {
  hidden: { opacity: 0, x: -20 },
  visible: { opacity: 1, x: 0, transition: { duration: 0.3 } }
};

// components/ui/Button.tsx
import React, { forwardRef } from 'react';
import { motion } from 'framer-motion';
import { ButtonProps } from '../../types/ui';
import { buttonAnimations } from '../../utils/animations';

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({
    variant = 'primary',
    size = 'md',
    disabled = false,
    loading = false,
    icon,
    iconPosition = 'left',
    children,
    className = '',
    onClick,
    type = 'button',
    ...props
  }, ref) => {
    const baseClasses = 'alpha-btn inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gold/50';
    
    const variantClasses = {
      primary: 'bg-gradient-to-r from-gold to-gold/80 text-matte-black hover:from-gold/90 hover:to-gold/70 shadow-lg',
      secondary: 'bg-matte-black text-ivory border border-ivory/20 hover:border-gold/50',
      outline: 'border-2 border-gold text-gold hover:bg-gold hover:text-matte-black',
      ghost: 'text-gold hover:bg-gold/10 hover:text-gold/90',
      danger: 'bg-red-600 text-white hover:bg-red-700'
    };
    
    const sizeClasses = {
      sm: 'px-3 py-1.5 text-sm gap-1',
      md: 'px-4 py-2 text-base gap-2',
      lg: 'px-6 py-3 text-lg gap-2',
      xl: 'px-8 py-4 text-xl gap-3'
    };

    const isRTL = document.dir === 'rtl';
    
    return (
      <motion.button
        ref={ref}
        type={type}
        disabled={disabled || loading}
        onClick={onClick}
        className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}
        variants={disabled ? undefined : buttonAnimations}
        initial="idle"
        whileHover="hover"
        whileTap="tap"
        {...props}
      >
        {loading && (
          <svg className="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"/>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
          </svg>
        )}
        
        {icon && !loading && iconPosition === (isRTL ? 'right' : 'left') && (
          <span className="flex-shrink-0">{icon}</span>
        )}
        
        {children}
        
        {icon && !loading && iconPosition === (isRTL ? 'left' : 'right') && (
          <span className="flex-shrink-0">{icon}</span>
        )}
      </motion.button>
    );
  }
);

Button.displayName = 'AlphaButton';

export default Button;

// components/ui/Input.tsx
import React, { forwardRef, useState } from 'react';
import { motion } from 'framer-motion';
import { InputProps } from '../../types/ui';
import { fadeInUp } from '../../utils/animations';

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({
    variant = 'default',
    type = 'text',
    label,
    placeholder,
    error,
    helperText,
    icon,
    disabled = false,
    required = false,
    className = '',
    dir,
    ...props
  }, ref) => {
    const [showPassword, setShowPassword] = useState(false);
    const [focused, setFocused] = useState(false);
    
    const inputType = type === 'password' && showPassword ? 'text' : type;
    const isRTL = dir === 'rtl' || document.dir === 'rtl';

    const baseClasses = 'alpha-input w-full px-4 py-3 rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gold/50';
    
    const variantClasses = {
      default: 'border border-ivory/20 bg-ivory/5 text-ivory placeholder-ivory/50 focus:border-gold',
      filled: 'bg-ivory/10 text-ivory placeholder-ivory/60 focus:bg-ivory/20',
      outlined: 'border-2 border-ivory/30 bg-transparent text-ivory placeholder-ivory/50 focus:border-gold'
    };

    return (
      <motion.div 
        className={`alpha-input-wrapper ${className}`}
        variants={fadeInUp}
        initial="hidden"
        animate="visible"
      >
        {label && (
          <label className={`block text-sm font-medium text-ivory mb-2 ${isRTL ? 'text-right' : 'text-left'}`}>
            {label}
            {required && <span className="text-red-500 mr-1">*</span>}
          </label>
        )}
        
        <div className="relative">
          {icon && (
            <div className={`absolute top-1/2 transform -translate-y-1/2 ${isRTL ? 'right-3' : 'left-3'} text-ivory/50`}>
              {icon}
            </div>
          )}
          
          <input
            ref={ref}
            type={inputType}
            disabled={disabled}
            placeholder={placeholder}
            dir={isRTL ? 'rtl' : 'ltr'}
            className={`
              ${baseClasses} 
              ${variantClasses[variant]} 
              ${icon ? (isRTL ? 'pr-10' : 'pl-10') : ''} 
              ${type === 'password' ? (isRTL ? 'pl-10' : 'pr-10') : ''}
              ${error ? 'border-red-500 focus:border-red-500 focus:ring-red-500/50' : ''}
              ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
              ${focused ? 'shadow-lg shadow-gold/10' : ''}
            `}
            onFocus={() => setFocused(true)}
            onBlur={() => setFocused(false)}
            {...props}
          />
          
          {type === 'password' && (
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className={`absolute top-1/2 transform -translate-y-1/2 ${isRTL ? 'left-3' : 'right-3'} text-ivory/50 hover:text-gold transition-colors`}
            >
              {showPassword ? (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                </svg>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              )}
            </button>
          )}
        </div>
        
        {(error || helperText) && (
          <motion.p 
            className={`mt-2 text-sm ${error ? 'text-red-500' : 'text-ivory/60'} ${isRTL ? 'text-right' : 'text-left'}`}
            variants={fadeInUp}
            initial="hidden"
            animate="visible"
          >
            {error || helperText}
          </motion.p>
        )}
      </motion.div>
    );
  }
);

Input.displayName = 'AlphaInput';

export default Input;

// components/ui/Card.tsx
import React, { forwardRef } from 'react';
import { motion } from 'framer-motion';
import { CardProps } from '../../types/ui';
import { cardAnimations } from '../../utils/animations';

const Card = forwardRef<HTMLDivElement, CardProps>(
  ({
    variant = 'default',
    padding = 'md',
    hoverable = false,
    loading = false,
    onClick,
    children,
    className = '',
    ...props
  }, ref) => {
    const baseClasses = 'alpha-card rounded-lg transition-all duration-300';
    
    const variantClasses = {
      default: 'bg-ivory/5 border border-ivory/10 backdrop-blur-sm',
      elevated: 'bg-ivory/10 shadow-lg shadow-black/20 backdrop-blur-md',
      outlined: 'bg-transparent border-2 border-ivory/20',
      dark: 'bg-matte-black/80 border border-gold/20'
    };
    
    const paddingClasses = {
      none: '',
      sm: 'p-3',
      md: 'p-6',
      lg: 'p-8',
      xl: 'p-12'
    };

    const Component = motion.div;
    
    return (
      <Component
        ref={ref}
        onClick={onClick}
        className={`
          ${baseClasses} 
          ${variantClasses[variant]} 
          ${paddingClasses[padding]}
          ${onClick || hoverable ? 'cursor-pointer' : ''}
          ${loading ? 'relative overflow-hidden' : ''}
          ${className}
        `}
        variants={hoverable || onClick ? cardAnimations : undefined}
        initial="idle"
        whileHover={hoverable || onClick ? "hover" : undefined}
        {...props}
      >
        {loading && (
          <div className="absolute inset-0 bg-matte-black/50 backdrop-blur-sm flex items-center justify-center z-10">
            <div className="alpha-loading-spinner">
              <div className="w-8 h-8 border-3 border-gold/30 border-t-gold rounded-full animate-spin"></div>
            </div>
          </div>
        )}
        
        {children}
      </Component>
    );
  }
);

Card.displayName = 'AlphaCard';

export default Card;

// components/ui/Modal.tsx
import React, { useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { createPortal } from 'react-dom';
import { ModalProps } from '../../types/ui';
import { modalAnimations } from '../../utils/animations';

const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  size = 'md',
  title,
  showCloseButton = true,
  children,
  className = '',
  ...props
}) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscape);
    
    return () => {
      document.body.style.overflow = '';
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
    full: 'max-w-full m-4'
  };

  const modalContent = (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Backdrop */}
          <motion.div
            className="absolute inset-0 bg-black/60 backdrop-blur-md"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
          />
          
          {/* Modal */}
          <motion.div
            className={`
              alpha-modal relative bg-matte-black/90 backdrop-blur-xl rounded-xl shadow-2xl border border-gold/20
              ${sizeClasses[size]} w-full mx-4 max-h-[90vh] overflow-hidden
              ${className}
            `}
            variants={modalAnimations}
            initial="hidden"
            animate="visible"
            exit="exit"
            {...props}
          >
            {/* Header */}
            {(title || showCloseButton) && (
              <div className="flex items-center justify-between p-6 border-b border-ivory/10">
                {title && (
                  <h2 className="text-xl font-semibold text-ivory font-iran-sans">
                    {title}
                  </h2>
                )}
                {showCloseButton && (
                  <button
                    onClick={onClose}
                    className="p-2 text-ivory/60 hover:text-gold transition-colors rounded-lg hover:bg-ivory/10"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                )}
              </div>
            )}
            
            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-8rem)]">
              {children}
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );

  return typeof window !== 'undefined' 
    ? createPortal(modalContent, document.body)
    : null;
};

export default Modal;

// components/ui/Loading.tsx
import React from 'react';
import { motion } from 'framer-motion';

interface LoadingProps {
  size?: 'sm' | 'md' | 'lg';
  variant?: 'spinner' | 'dots' | 'alpha';
  className?: string;
}

const Loading: React.FC<LoadingProps> = ({
  size = 'md',
  variant = 'alpha',
  className = ''
}) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8', 
    lg: 'w-12 h-12'
  };

  if (variant === 'spinner') {
    return (
      <div className={`alpha-loading-spinner ${className}`}>
        <div className={`${sizeClasses[size]} border-3 border-gold/30 border-t-gold rounded-full animate-spin`}></div>
      </div>
    );
  }

  if (variant === 'dots') {
    return (
      <div className={`alpha-loading-dots flex space-x-1 ${className}`}>
        {[0, 1, 2].map((i) => (
          <motion.div
            key={i}
            className="w-2 h-2 bg-gold rounded-full"
            animate={{
              y: [0, -8, 0],
              opacity: [0.7, 1, 0.7]
            }}
            transition={{
              duration: 0.6,
              repeat: Infinity,
              delay: i * 0.1
            }}
          />
        ))}
      </div>
    );
  }

  // Alpha variant - rotating Î± symbol
  return (
    <div className={`alpha-loading-alpha ${className}`}>
      <motion.div
        className={`${sizeClasses[size]} text-gold font-bold text-2xl flex items-center justify-center`}
        animate={{ rotate: 360 }}
        transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
      >
        Î±
      </motion.div>
    </div>
  );
};

export default Loading;

// components/ui/Toast.tsx
import React, { useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ToastProps } from '../../types/ui';

const Toast: React.FC<ToastProps> = ({
  id,
  message,
  type,
  duration = 5000,
  onClose,
  dir = 'ltr'
}) => {
  useEffect(() => {
    if (duration > 0) {
      const timer = setTimeout(() => {
        onClose(id);
      }, duration);
      
      return () => clearTimeout(timer);
    }
  }, [duration, id, onClose]);

  const typeStyles = {
    success: 'bg-emerald/20 border-emerald text-emerald',
    error: 'bg-red-500/20 border-red-500 text-red-400',
    warning: 'bg-yellow-500/20 border-yellow-500 text-yellow-400',
    info: 'bg-blue-500/20 border-blue-500 text-blue-400'
  };

  const icons = {
    success: (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
      </svg>
    ),
    error: (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
      </svg>
    ),
    warning: (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
      </svg>
    ),
    info: (
      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    )
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: -50, scale: 0.8 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: -50, scale: 0.8 }}
      className={`
        alpha-toast relative flex items-center gap-3 p-4 rounded-lg border backdrop-blur-md shadow-lg
        ${typeStyles[type]} ${dir === 'rtl' ? 'flex-row-reverse text-right' : 'flex-row text-left'}
      `}
    >
      <div className="flex-shrink-0">
        {icons[type]}
      </div>
      
      <div className="flex-1 font-iran-sans">
        {message}
      </div>
      
      <button
        onClick={() => onClose(id)}
        className="flex-shrink-0 p-1 hover:bg-white/10 rounded transition-colors"
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </motion.div>
  );
};

// Toast Container Component
interface ToastContainerProps {
  toasts: ToastProps[];
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
}

export const ToastContainer: React.FC<ToastContainerProps> = ({
  toasts,
  position = 'top-right'
}) => {
  const positionClasses = {
    'top-right': 'top-4 right-4',
    'top-left': 'top-4 left-4',
    'bottom-right': 'bottom-4 right-4',
    'bottom-left': 'bottom-4 left-4',
    'top-center': 'top-4 left-1/2 transform -translate-x-1/2',
    'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2'
  };

  return (
    <div className={`fixed z-50 flex flex-col gap-2 max-w-sm w-full ${positionClasses[position]}`}>
      <AnimatePresence mode="popLayout">
        {toasts.map((toast) => (
          <Toast key={toast.id} {...toast} />
        ))}
      </AnimatePresence>
    </div>
  );
};

export default Toast;

// components/ui/Tooltip.tsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { createPortal } from 'react-dom';

interface TooltipProps {
  content: string;
  children: React.ReactNode;
  position?: 'top' | 'bottom' | 'left' | 'right';
  delay?: number;
  className?: string;
}

const Tooltip: React.FC<TooltipProps> = ({
  content,
  children,
  position = 'top',
  delay = 500,
  className = ''
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [coords, setCoords] = useState({ x: 0, y: 0 });
  const triggerRef = useRef<HTMLDivElement>(null);
  const timeoutRef = useRef<NodeJS.Timeout>();

  const showTooltip = () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    
    timeoutRef.current = setTimeout(() => {
      if (triggerRef.current) {
        const rect = triggerRef.current.getBoundingClientRect();
        const scrollX = window.pageXOffset;
        const scrollY = window.pageYOffset;
        
        let x = rect.left + scrollX + rect.width / 2;
        let y = rect.top + scrollY;
        
        switch (position) {
          case 'bottom':
            y = rect.bottom + scrollY + 8;
            break;
          case 'left':
            x = rect.left + scrollX - 8;
            y = rect.top + scrollY + rect.height / 2;
            break;
          case 'right':
            x = rect.right + scrollX + 8;
            y = rect.top + scrollY + rect.height / 2;
            break;
          default: // top
            y = rect.top + scrollY - 8;
        }
        
        setCoords({ x, y });
        setIsVisible(true);
      }
    }, delay);
  };

  const hideTooltip = () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    setIsVisible(false);
  };

  useEffect(() => {
    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, []);

  const tooltipContent = (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.8 }}
          transition={{ duration: 0.15 }}
          className={`
            alpha-tooltip absolute z-50 px-3 py-2 text-sm text-ivory bg-matte-black/90 
            rounded-lg shadow-lg backdrop-blur-sm border border-gold/20 font-iran-sans
            ${position === 'top' ? 'transform -translate-x-1/2 -translate-y-full' : ''}
            ${position === 'bottom' ? 'transform -translate-x-1/2' : ''}
            ${position === 'left' ? 'transform -translate-x-full -translate-y-1/2' : '
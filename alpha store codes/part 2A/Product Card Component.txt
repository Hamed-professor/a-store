// src/components/product/ProductCard.tsx

import React, { useState, useRef } from 'react';
import { Star, ShoppingCart, Eye, Zap } from 'lucide-react';
import { Product } from '../../types/product';
import { formatCompactPrice, toPersianDigits } from '../../utils/currency';
import { getOptimizedImageProps, handleImageError, createImagePlaceholder } from '../../utils/images';
import WishlistButton from './WishlistButton';

interface ProductCardProps {
  product: Product;
  locale?: 'fa' | 'en';
  className?: string;
  onProductClick?: (product: Product) => void;
  onAddToCart?: (productId: string) => void;
  onQuickView?: (productId: string) => void;
  showQuickView?: boolean;
  showAddToCart?: boolean;
}

const ProductCard: React.FC<ProductCardProps> = ({
  product,
  locale = 'fa',
  className = '',
  onProductClick,
  onAddToCart,
  onQuickView,
  showQuickView = true,
  showAddToCart = true
}) => {
  const [isFlipped, setIsFlipped] = useState(false);
  const [imageLoading, setImageLoading] = useState(true);
  const [imageError, setImageError] = useState(false);
  const cardRef = useRef<HTMLDivElement>(null);

  const mainImage = product.images.find(img => img.isMain) || product.images[0];
  const backImage = product.images[1] || mainImage;

  const handleCardClick = () => {
    if (onProductClick) {
      onProductClick(product);
    }
  };

  const handleAddToCart = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (onAddToCart && product.isInStock) {
      onAddToCart(product.id);
    }
  };

  const handleQuickView = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (onQuickView) {
      onQuickView(product.id);
    }
  };

  const renderRating = () => {
    const rating = product.rating.average;
    const count = product.rating.count;

    return (
      <div className="flex items-center gap-1 text-sm">
        <div className="flex">
          {[...Array(5)].map((_, i) => (
            <Star
              key={i}
              className={`w-4 h-4 ${
                i < Math.floor(rating)
                  ? 'fill-yellow-400 text-yellow-400'
                  : i < rating
                  ? 'fill-yellow-200 text-yellow-400'
                  : 'fill-gray-200 text-gray-300'
              }`}
            />
          ))}
        </div>
        <span className="text-gray-600 text-xs">
          ({locale === 'fa' ? toPersianDigits(count.toString()) : count})
        </span>
      </div>
    );
  };

  const renderPrice = () => {
    const hasDiscount = product.price.originalAmount && product.price.originalAmount > product.price.amount;

    return (
      <div className="space-y-1">
        <div className="flex items-center gap-2">
          <span className="text-lg font-bold text-gray-900">
            {formatCompactPrice(product.price.amount, product.price.currency, locale)}
          </span>
          {hasDiscount && (
            <span className="text-sm text-gray-500 line-through">
              {formatCompactPrice(product.price.originalAmount!, product.price.currency, locale)}
            </span>
          )}
        </div>
        {hasDiscount && (
          <div className="text-xs text-green-600 font-medium">
            {locale === 'fa' ? 'صرفه‌جویی: ' : 'Save: '}
            {formatCompactPrice(
              product.price.originalAmount! - product.price.amount,
              product.price.currency,
              locale
            )}
          </div>
        )}
      </div>
    );
  };

  const renderBadges = () => (
    <div className="absolute top-3 left-3 z-10 space-y-1">
      {/* Alpha Store Quality Badge */}
      <div className="bg-gradient-to-r from-yellow-400 to-yellow-500 text-black px-2 py-1 rounded-full text-xs font-bold flex items-center gap-1">
        <span>Î±</span>
        <span>{locale === 'fa' ? 'کیفیت برتر' : 'Premium'}</span>
      </div>

      {/* Discount Badge */}
      {product.price.discountPercentage && (
        <div className="bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
          {locale === 'fa' 
            ? `${toPersianDigits(product.price.discountPercentage.toString())}% تخفیف`
            : `${product.price.discountPercentage}% OFF`
          }
        </div>
      )}

      {/* New Badge */}
      {product.isNew && (
        <div className="bg-emerald-500 text-white px-2 py-1 rounded-full text-xs font-bold">
          {locale === 'fa' ? 'جدید' : 'New'}
        </div>
      )}

      {/* Featured Badge */}
      {product.isFeatured && (
        <div className="bg-purple-500 text-white px-2 py-1 rounded-full text-xs font-bold flex items-center gap-1">
          <Zap className="w-3 h-3" />
          <span>{locale === 'fa' ? 'ویژه' : 'Featured'}</span>
        </div>
      )}
    </div>
  );

  const renderOutOfStock = () => {
    if (product.isInStock) return null;

    return (
      <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center z-20 rounded-xl">
        <div className="text-center">
          <div className="text-red-500 font-bold text-lg mb-1">
            {locale === 'fa' ? 'ناموجود' : 'Out of Stock'}
          </div>
          <div className="text-gray-500 text-sm">
            {locale === 'fa' ? 'اطلاع از موجودی' : 'Notify when available'}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div
      ref={cardRef}
      className={`
        group relative bg-white rounded-xl shadow-lg border border-gray-100
        transition-all duration-500 transform-gpu perspective-1000
        hover:shadow-2xl hover:shadow-black/10 hover:-translate-y-2
        cursor-pointer overflow-hidden
        ${className}
      `}
      onClick={handleCardClick}
      onMouseEnter={() => setIsFlipped(true)}
      onMouseLeave={() => setIsFlipped(false)}
    >
      {/* 3D Card Container */}
      <div className={`
        relative w-full h-full transition-transform duration-700 transform-style-preserve-3d
        ${isFlipped ? 'rotate-y-180' : ''}
      `}>
        
        {/* Front Side */}
        <div className="absolute inset-0 backface-hidden">
          {/* Image Container */}
          <div className="relative aspect-square overflow-hidden rounded-t-xl bg-gray-100">
            {/* Image */}
            {mainImage && (
              <img
                src={mainImage.url}
                alt={mainImage.alt}
                className={`
                  w-full h-full object-cover transition-all duration-700
                  group-hover:scale-110
                  ${imageLoading ? 'opacity-0' : 'opacity-100'}
                `}
                onLoad={() => setImageLoading(false)}
                onError={(e) => {
                  setImageError(true);
                  setImageLoading(false);
                  handleImageError(e);
                }}
              />
            )}

            {/* Loading placeholder */}
            {imageLoading && (
              <div className="absolute inset-0 bg-gray-200 animate-pulse flex items-center justify-center">
                <div className="text-gray-400 text-sm">Loading...</div>
              </div>
            )}

            {/* Badges */}
            {renderBadges()}

            {/* Quick Actions */}
            <div className="absolute top-3 right-3 z-10 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              <WishlistButton
                productId={product.id}
                size="md"
                locale={locale}
              />
              
              {showQuickView && (
                <button
                  onClick={handleQuickView}
                  className="w-10 h-10 bg-white text-gray-600 rounded-full shadow-lg hover:bg-gray-50 hover:text-gray-800 transition-all duration-200 flex items-center justify-center"
                  title={locale === 'fa' ? 'مشاهده سریع' : 'Quick View'}
                >
                  <Eye className="w-5 h-5" />
                </button>
              )}
            </div>

            {/* Out of Stock Overlay */}
            {renderOutOfStock()}
          </div>

          {/* Content */}
          <div className="p-4 space-y-3">
            {/* Category */}
            <div className="text-sm text-gray-500">
              {product.category.name[locale]}
            </div>

            {/* Title */}
            <h3 className="font-semibold text-gray-900 line-clamp-2 leading-tight">
              {product.name[locale]}
            </h3>

            {/* Brand */}
            {product.brand && (
              <div className="text-sm text-gray-600">
                {product.brand.name}
              </div>
            )}

            {/* Rating */}
            {renderRating()}

            {/* Price */}
            {renderPrice()}

            {/* Add to Cart Button */}
            {showAddToCart && (
              <button
                onClick={handleAddToCart}
                disabled={!product.isInStock}
                className={`
                  w-full py-3 px-4 rounded-lg font-medium
                  transition-all duration-300 transform
                  flex items-center justify-center gap-2
                  ${product.isInStock
                    ? 'bg-black text-white hover:bg-gray-800 hover:scale-105 active:scale-95'
                    : 'bg-gray-200 text-gray-500 cursor-not-allowed'
                  }
                `}
              >
                <ShoppingCart className="w-4 h-4" />
                <span>
                  {locale === 'fa' 
                    ? (product.isInStock ? 'افزودن به سبد' : 'ناموجود')
                    : (product.isInStock ? 'Add to Cart' : 'Out of Stock')
                  }
                </span>
              </button>
            )}
          </div>
        </div>

        {/* Back Side */}
        <div className="absolute inset-0 backface-hidden rotate-y-180">
          {/* Back Image Container */}
          <div className="relative aspect-square overflow-hidden rounded-t-xl bg-gray-100">
            {backImage && (
              <img
                src={backImage.url}
                alt={backImage.alt}
                className="w-full h-full object-cover transition-all duration-700 group-hover:scale-110"
                onError={handleImageError}
              />
            )}

            {/* Gradient Overlay */}
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />

            {/* Back Content */}
            <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
              <h4 className="font-semibold mb-2">
                {locale === 'fa' ? 'مشخصات کلیدی:' : 'Key Features:'}
              </h4>
              <div className="space-y-1 text-sm opacity-90">
                {product.tags.slice(0, 3).map((tag, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-yellow-400 rounded-full" />
                    <span className="capitalize">{tag}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Back Content */}
          <div className="p-4 space-y-3">
            {/* Description */}
            <p className="text-sm text-gray-600 line-clamp-3">
              {product.description[locale]}
            </p>

            {/* Stock Info */}
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-500">
                {locale === 'fa' ? 'موجودی:' : 'Stock:'}
              </span>
              <span className={`font-medium ${
                product.stockCount > 10 ? 'text-green-600' : 
                product.stockCount > 0 ? 'text-yellow-600' : 
                'text-red-600'
              }`}>
                {product.isInStock ? (
                  locale === 'fa' 
                    ? `${toPersianDigits(product.stockCount.toString())} عدد`
                    : `${product.stockCount} items`
                ) : (
                  locale === 'fa' ? 'ناموجود' : 'Out of stock'
                )}
              </span>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-2 pt-2">
              {showAddToCart && (
                <button
                  onClick={handleAddToCart}
                  disabled={!product.isInStock}
                  className={`
                    flex-1 py-2 px-3 rounded-lg text-sm font-medium
                    transition-all duration-300 transform
                    flex items-center justify-center gap-2
                    ${product.isInStock
                      ? 'bg-black text-white hover:bg-gray-800'
                      : 'bg-gray-200 text-gray-500 cursor-not-allowed'
                    }
                  `}
                >
                  <ShoppingCart className="w-4 h-4" />
                  <span>
                    {locale === 'fa' ? 'سبد خرید' : 'Add to Cart'}
                  </span>
                </button>
              )}
              
              {showQuickView && (
                <button
                  onClick={handleQuickView}
                  className="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors duration-200"
                  title={locale === 'fa' ? 'مشاهده سریع' : 'Quick View'}
                >
                  <Eye className="w-4 h-4" />
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Hover glow effect */}
      <div className="absolute -inset-0.5 bg-gradient-to-r from-yellow-400 to-emerald-400 rounded-xl opacity-0 group-hover:opacity-20 transition-opacity duration-300 -z-10" />
    </div>
  );
};

export default ProductCard;
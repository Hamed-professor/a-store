import React, { useState, useRef, useEffect } from 'react';
import { 
  Plus, Upload, Download, Search, Filter, Eye, Edit, 
  Trash2, Copy, Save, X, Image, Tag, Package, 
  DollarSign, BarChart3, AlertTriangle, Check,
  ChevronDown, ChevronRight, Move, Grid, List,
  Camera, Crop, RotateCcw, ZoomIn, Star
} from 'lucide-react';

// Sample data and types
interface Product {
  id: string;
  name: string;
  namePersian: string;
  description: string;
  price: number;
  originalPrice?: number;
  stock: number;
  category: string;
  status: 'active' | 'draft' | 'archived';
  images: string[];
  variations?: ProductVariation[];
  createdAt: string;
  sales: number;
}

interface ProductVariation {
  id: string;
  type: string;
  value: string;
  price?: number;
  stock?: number;
}

interface Category {
  id: string;
  name: string;
  namePersian: string;
  children?: Category[];
  productCount: number;
}

const sampleProducts: Product[] = [
  {
    id: '1',
    name: 'Premium Coffee Beans',
    namePersian: 'دانه قهوه پریمیوم',
    description: 'High-quality arabica coffee beans',
    price: 450000,
    originalPrice: 500000,
    stock: 50,
    category: 'beverages',
    status: 'active',
    images: ['/api/placeholder/300/300'],
    createdAt: '2024-01-15',
    sales: 125
  },
  {
    id: '2',
    name: 'Organic Honey',
    namePersian: 'عسل ارگانیک',
    description: 'Pure organic honey from mountain flowers',
    price: 320000,
    stock: 30,
    category: 'food',
    status: 'active',
    images: ['/api/placeholder/300/300'],
    createdAt: '2024-01-10',
    sales: 89
  },
  {
    id: '3',
    name: 'Handmade Carpet',
    namePersian: 'فرش دستباف',
    description: 'Traditional Persian handmade carpet',
    price: 15000000,
    stock: 5,
    category: 'home',
    status: 'draft',
    images: ['/api/placeholder/300/300'],
    createdAt: '2024-01-12',
    sales: 3
  }
];

const sampleCategories: Category[] = [
  {
    id: '1',
    name: 'Food & Beverages',
    namePersian: 'غذا و نوشیدنی',
    productCount: 45,
    children: [
      { id: '11', name: 'Beverages', namePersian: 'نوشیدنی', productCount: 15 },
      { id: '12', name: 'Snacks', namePersian: 'تنقلات', productCount: 30 }
    ]
  },
  {
    id: '2',
    name: 'Home & Garden',
    namePersian: 'خانه و باغ',
    productCount: 32,
    children: [
      { id: '21', name: 'Furniture', namePersian: 'مبلمان', productCount: 20 },
      { id: '22', name: 'Decoration', namePersian: 'دکوراسیون', productCount: 12 }
    ]
  }
];

// Product Editor Component
const ProductEditor = ({ product, onSave, onClose }: {
  product?: Product;
  onSave: (product: any) => void;
  onClose: () => void;
}) => {
  const [formData, setFormData] = useState({
    name: product?.name || '',
    namePersian: product?.namePersian || '',
    description: product?.description || '',
    price: product?.price || 0,
    originalPrice: product?.originalPrice || 0,
    stock: product?.stock || 0,
    category: product?.category || '',
    status: product?.status || 'draft',
    images: product?.images || []
  });

  const [activeTab, setActiveTab] = useState('basic');
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleImageUpload = (files: FileList | null) => {
    if (files) {
      const newImages = Array.from(files).map(file => URL.createObjectURL(file));
      setFormData(prev => ({
        ...prev,
        images: [...prev.images, ...newImages]
      }));
    }
  };

  const removeImage = (index: number) => {
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const tabs = [
    { id: 'basic', label: 'اطلاعات پایه', icon: Package },
    { id: 'images', label: 'تصاویر', icon: Image },
    { id: 'pricing', label: 'قیمت‌گذاری', icon: DollarSign },
    { id: 'inventory', label: 'موجودی', icon: BarChart3 },
    { id: 'seo', label: 'سئو', icon: Search }
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-purple-600 to-blue-600 text-white">
          <h2 className="text-xl font-bold">
            {product ? 'ویرایش محصول' : 'افزودن محصول جدید'}
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-gray-200 bg-gray-50">
          {tabs.map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-4 py-3 font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'text-purple-600 border-b-2 border-purple-600 bg-white'
                    : 'text-gray-600 hover:text-gray-800'
                }`}
              >
                <Icon className="w-4 h-4 ml-2" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          {activeTab === 'basic' && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    نام محصول (انگلیسی)
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    placeholder="Product Name"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    نام محصول (فارسی)
                  </label>
                  <input
                    type="text"
                    value={formData.namePersian}
                    onChange={(e) => setFormData(prev => ({ ...prev, namePersian: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-right"
                    placeholder="نام محصول"
                    dir="rtl"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  توضیحات محصول
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-right"
                  placeholder="توضیحات کامل محصول..."
                  dir="rtl"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    دسته‌بندی
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  >
                    <option value="">انتخاب دسته‌بندی</option>
                    <option value="food">غذا و نوشیدنی</option>
                    <option value="home">خانه و باغ</option>
                    <option value="electronics">الکترونیک</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    وضعیت
                  </label>
                  <select
                    value={formData.status}
                    onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as any }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  >
                    <option value="active">فعال</option>
                    <option value="draft">پیش‌نویس</option>
                    <option value="archived">آرشیو</option>
                  </select>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'images' && (
            <div className="space-y-6">
              {/* Image Upload Area */}
              <div
                className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-purple-500 transition-colors cursor-pointer"
                onClick={() => fileInputRef.current?.click()}
                onDrop={(e) => {
                  e.preventDefault();
                  handleImageUpload(e.dataTransfer.files);
                }}
                onDragOver={(e) => e.preventDefault()}
              >
                <Camera className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-lg font-medium text-gray-700 mb-2">
                  تصاویر محصول را اینجا بکشید
                </p>
                <p className="text-sm text-gray-500 mb-4">
                  یا کلیک کنید تا فایل انتخاب کنید
                </p>
                <button className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                  انتخاب تصاویر
                </button>
              </div>

              <input
                type="file"
                ref={fileInputRef}
                onChange={(e) => handleImageUpload(e.target.files)}
                multiple
                accept="image/*"
                className="hidden"
              />

              {/* Image Gallery */}
              {formData.images.length > 0 && (
                <div className="grid grid-cols-4 gap-4">
                  {formData.images.map((image, index) => (
                    <div key={index} className="relative group">
                      <img
                        src={image}
                        alt={`Product ${index + 1}`}
                        className="w-full h-32 object-cover rounded-lg border-2 border-gray-200"
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center space-x-2">
                        <button className="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 ml-2">
                          <Crop className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => removeImage(index)}
                          className="p-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                      {index === 0 && (
                        <div className="absolute top-2 left-2 bg-yellow-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                          اصلی
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'pricing' && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    قیمت فروش (تومان)
                  </label>
                  <input
                    type="number"
                    value={formData.price}
                    onChange={(e) => setFormData(prev => ({ ...prev, price: Number(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    placeholder="0"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    قیمت اصلی (تومان)
                  </label>
                  <input
                    type="number"
                    value={formData.originalPrice}
                    onChange={(e) => setFormData(prev => ({ ...prev, originalPrice: Number(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    placeholder="0"
                  />
                </div>
              </div>

              {formData.originalPrice > formData.price && formData.originalPrice > 0 && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <div className="text-green-800 text-sm">
                      <span className="font-medium">تخفیف:</span>
                      <span className="mr-2">
                        {Math.round(((formData.originalPrice - formData.price) / formData.originalPrice) * 100)}%
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'inventory' && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    موجودی انبار
                  </label>
                  <input
                    type="number"
                    value={formData.stock}
                    onChange={(e) => setFormData(prev => ({ ...prev, stock: Number(e.target.value) }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    placeholder="0"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    حد مجاز موجودی
                  </label>
                  <input
                    type="number"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    placeholder="10"
                  />
                </div>
              </div>

              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-800 mb-3">وضعیت موجودی</h4>
                <div className="flex items-center space-x-4 space-x-reverse">
                  <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                    formData.stock > 20 
                      ? 'bg-green-100 text-green-800' 
                      : formData.stock > 5 
                      ? 'bg-yellow-100 text-yellow-800'
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {formData.stock > 20 ? 'موجود' : formData.stock > 5 ? 'کم' : 'ناموجود'}
                  </div>
                  <span className="text-sm text-gray-600">
                    {formData.stock} عدد در انبار
                  </span>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'seo' && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  عنوان SEO
                </label>
                <input
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-right"
                  placeholder="عنوان برای موتورهای جستجو"
                  dir="rtl"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  توضیحات SEO
                </label>
                <textarea
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-right"
                  placeholder="توضیحات کوتاه برای موتورهای جستجو"
                  dir="rtl"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  کلمات کلیدی
                </label>
                <input
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-right"
                  placeholder="کلمات کلیدی با کاما جدا کنید"
                  dir="rtl"
                />
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-between items-center p-6 border-t border-gray-200 bg-gray-50">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          >
            انصراف
          </button>
          <div className="flex space-x-3 space-x-reverse">
            <button
              onClick={() => onSave({ ...formData, status: 'draft' })}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
            >
              ذخیره پیش‌نویس
            </button>
            <button
              onClick={() => onSave({ ...formData, status: 'active' })}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center"
            >
              <Save className="w-4 h-4 ml-2" />
              ذخیره و انتشار
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Bulk Upload Component
const BulkUpload = ({ onClose, onUpload }: {
  onClose: () => void;
  onUpload: (data: any[]) => void;
}) => {
  const [step, setStep] = useState(1);
  const [uploadedData, setUploadedData] = useState<any[]>([]);
  const [mapping, setMapping] = useState<Record<string, string>>({});
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Simulate CSV parsing
      const sampleData = [
        { 'Product Name': 'Sample Product 1', 'Price': '100000', 'Stock': '50' },
        { 'Product Name': 'Sample Product 2', 'Price': '200000', 'Stock': '30' },
      ];
      setUploadedData(sampleData);
      setStep(2);
    }
  };

  const downloadTemplate = () => {
    // Create and download CSV template
    const csvContent = "نام محصول,قیمت,موجودی,دسته‌بندی\nنمونه محصول,100000,50,غذا\n";
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "product-template.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-green-600 to-blue-600 text-white">
          <h2 className="text-xl font-bold">آپلود دسته‌ای محصولات</h2>
          <button onClick={onClose} className="p-2 hover:bg-white hover:bg-opacity-20 rounded-lg">
            <X className="w-5 h-5" />
          </button>
        </div>

        <div className="p-6">
          {/* Steps */}
          <div className="flex items-center justify-center mb-8">
            <div className="flex items-center space-x-4 space-x-reverse">
              {[1, 2, 3].map((stepNum) => (
                <React.Fragment key={stepNum}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    step >= stepNum ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-600'
                  }`}>
                    {step > stepNum ? <Check className="w-4 h-4" /> : stepNum}
                  </div>
                  {stepNum < 3 && (
                    <div className={`w-12 h-1 ${step > stepNum ? 'bg-green-600' : 'bg-gray-200'}`} />
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>

          {step === 1 && (
            <div className="text-center">
              <Upload className="w-16 h-16 text-gray-400 mx-auto mb-6" />
              <h3 className="text-lg font-medium mb-4">آپلود فایل محصولات</h3>
              <p className="text-gray-600 mb-6">
                فایل Excel یا CSV خود را انتخاب کنید یا ابتدا قالب را دانلود کنید
              </p>

              <div className="flex justify-center space-x-4 space-x-reverse mb-6">
                <button
                  onClick={downloadTemplate}
                  className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Download className="w-4 h-4 ml-2" />
                  دانلود قالب
                </button>
                <button
                  onClick={() => fileInputRef.current?.click()}
                  className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Upload className="w-4 h-4 ml-2" />
                  انتخاب فایل
                </button>
              </div>

              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileUpload}
                accept=".csv,.xlsx,.xls"
                className="hidden"
              />

              <div className="text-sm text-gray-500">
                فرمت‌های پشتیبانی شده: CSV, Excel (XLSX, XLS)
              </div>
            </div>
          )}

          {step === 2 && (
            <div>
              <h3 className="text-lg font-medium mb-4">تطبیق ستون‌ها</h3>
              <p className="text-gray-600 mb-6">
                ستون‌های فایل خود را با فیلدهای محصول تطبیق دهید
              </p>

              <div className="space-y-4 mb-6">
                {Object.keys(uploadedData[0] || {}).map((column) => (
                  <div key={column} className="flex items-center space-x-4 space-x-reverse">
                    <div className="w-1/3">
                      <span className="text-sm font-medium">{column}</span>
                    </div>
                    <div className="w-2/3">
                      <select
                        value={mapping[column] || ''}
                        onChange={(e) => setMapping(prev => ({ ...prev, [column]: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                      >
                        <option value="">انتخاب فیلد</option>
                        <option value="name">نام محصول</option>
                        <option value="price">قیمت</option>
                        <option value="stock">موجودی</option>
                        <option value="category">دسته‌بندی</option>
                        <option value="description">توضیحات</option>
                      </select>
                    </div>
                  </div>
                ))}
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setStep(1)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  بازگشت
                </button>
                <button
                  onClick={() => setStep(3)}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                  disabled={Object.keys(mapping).length === 0}
                >
                  مرحله بعد
                </button>
              </div>
            </div>
          )}

          {step === 3 && (
            <div>
              <h3 className="text-lg font-medium mb-4">پیش‌نمایش و تأیید</h3>
              <p className="text-gray-600 mb-6">
                {uploadedData.length} محصول آماده وارد شدن است
              </p>

              <div className="bg-gray-50 rounded-lg p-4 mb-6 max-h-64 overflow-y-auto">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-right py-2">نام محصول</th>
                      <th className="text-right py-2">قیمت</th>
                      <th className="text-right py-2">موجودی</th>
                      <th className="text-right py-2">وضعیت</th>
                    </tr>
                  </thead>
                  <tbody>
                    {uploadedData.slice(0, 5).map((item, index) => (
                      <tr key={index} className="border-b">
                        <td className="py-2">{item[Object.keys(item)[0]]}</td>
                        <td className="py-2">{item[Object.keys(item)[1]]} تومان</td>
                        <td className="py-2">{item[Object.keys(item)[2]]}</td>
                        <td className="py-2">
                          <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">
                            آماده
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setStep(2)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  بازگشت
                </button>
                <button
                  onClick={() => {
                    onUpload(uploadedData);
                    onClose();
                  }}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center"
                >
                  <Check className="w-4 h-4 ml-2" />
                  وارد کردن محصولات
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Category Manager Component
const CategoryManager = ({ categories, onUpdate }: {
  categories: Category[];
  onUpdate: (categories: Category[]) => void;
}) => {
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set(['1', '2']));
  const [editingCategory, setEditingCategory] = useState<string | null>(null);
  const [newCategoryName, setNewCategoryName] = useState('');

  const toggleExpanded = (id: string) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedCategories(newExpanded);
  };

  const CategoryItem = ({ category, level = 0 }: { category: Category; level?: number }) => (
    <div className={`${level > 0 ? 'mr-6' : ''}`}>
      <div className="flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg group">
        <div className="flex items-center">
          {category.children && (
            <button
              onClick={() => toggleExpanded(category.id)}
              className="p-1 hover:bg-gray-200 rounded mr-2"
            >
              {expandedCategories.has(category.id) ? (
                <ChevronDown className="w-4 h-4" />
              ) : (
                <ChevronRight className="w-4 h-4" />
              )}
            </button>
          )}
          <Tag className="w-4 h-4 text-gray-400 ml-2" />
          <div>
            <div className="font-medium">{category.namePersian}</div>
            <div className="text-sm text-gray-500">{category.name}</div>
          </div>
        </div>
        <div className="flex items-center space-x-2 space-x-reverse">
          <span className="text-sm text-gray-500">
            {category.productCount} محصول
          </span>
          <div className="opacity-0 group-hover:opacity-100 flex items-center space-x-1 space-x-reverse">
            <button
              onClick={() => setEditingCategory(category.id)}
              className="p-1 text-blue-600 hover:bg-blue-50 rounded"
            >
              <Edit className="w-4 h-4" />
            </button>
            <button className="p-1 text-red-600 hover:bg-red-50 rounded">
              <Trash2 className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
      
      {category.children && expandedCategories.has(category.id) && (
        <div>
          {category.children.map(child => (
            <CategoryItem key={child.id} category={child} level={level + 1} />
          ))}
        </div>
      )}
    </div>
  );

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold">مدیریت دسته‌بندی‌ها</h3>
        <button className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
          <Plus className="w-4 h-4 ml-2" />
          دسته‌بندی جدید
        </button>
      </div>

      <div className="space-y-2">
        {categories.map(category => (
          <CategoryItem key={category.id} category={category} />
        ))}
      </div>
    </div>
  );
};

// Main Product Management Component
const ProductManagement = () => {
  const [products, setProducts] = useState<Product[]>(sampleProducts);
  const [categories, setCategories] = useState<Category[]>(sampleCategories);
  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());
  const [viewMode, setViewMode] = useState<'table' | 'grid'>('table');
  const [showEditor, setShowEditor] = useState(false);
  const [showBulkUpload, setShowBulkUpload] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | undefined>();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterCategory, setFilterCategory] = useState('all');

  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.namePersian.includes(searchTerm);
    const matchesStatus = filterStatus === 'all' || product.status === filterStatus;
    const matchesCategory = filterCategory === 'all' || product.category === filterCategory;
    
    return matchesSearch && matchesStatus && matchesCategory;
  });

  const handleSelectProduct = (productId: string) => {
    const newSelected = new Set(selectedProducts);
    if (newSelected.has(productId)) {
      newSelected.delete(productId);
    } else {
      newSelected.add(productId);
    }
    setSelectedProducts(newSelected);
  };

  const handleSelectAll = () => {
    if (selectedProducts.size === filteredProducts.length) {
      setSelectedProducts(new Set());
    } else {
      setSelectedProducts(new Set(filteredProducts.map(p => p.id)));
    }
  };

  const handleBulkDelete = () => {
    if (confirm(`آیا از حذف ${selectedProducts.size} محصول اطمینان دارید؟`)) {
      setProducts(prev => prev.filter(p => !selectedProducts.has(p.id)));
      setSelectedProducts(new Set());
    }
  };

  const handleProductSave = (productData: any) => {
    if (editingProduct) {
      setProducts(prev => prev.map(p => 
        p.id === editingProduct.id ? { ...p, ...productData } : p
      ));
    } else {
      const newProduct: Product = {
        ...productData,
        id: Date.now().toString(),
        createdAt: new Date().toISOString().split('T')[0],
        sales: 0,
        images: productData.images || []
      };
      setProducts(prev => [...prev, newProduct]);
    }
    setShowEditor(false);
    setEditingProduct(undefined);
  };

  const handleBulkUpload = (data: any[]) => {
    // Process bulk upload data
    console.log('Bulk upload data:', data);
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      active: { label: 'فعال', class: 'bg-green-100 text-green-800' },
      draft: { label: 'پیش‌نویس', class: 'bg-yellow-100 text-yellow-800' },
      archived: { label: 'آرشیو', class: 'bg-gray-100 text-gray-800' }
    };
    const config = statusConfig[status as keyof typeof statusConfig];
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.class}`}>
        {config.label}
      </span>
    );
  };

  const getStockBadge = (stock: number) => {
    if (stock > 20) {
      return <span className="text-green-600 font-medium">موجود</span>;
    } else if (stock > 5) {
      return <span className="text-yellow-600 font-medium">کم</span>;
    } else {
      return <span className="text-red-600 font-medium">ناموجود</span>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50" dir="rtl">
      <div className="max-w-7xl mx-auto p-6">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">مدیریت محصولات</h1>
          <p className="text-gray-600">مدیریت کامل محصولات فروشگاه آلفا</p>
        </div>

        {/* Action Bar */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 mb-6">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div className="flex items-center space-x-4 space-x-reverse">
              <button
                onClick={() => {
                  setEditingProduct(undefined);
                  setShowEditor(true);
                }}
                className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                <Plus className="w-4 h-4 ml-2" />
                محصول جدید
              </button>
              <button
                onClick={() => setShowBulkUpload(true)}
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Upload className="w-4 h-4 ml-2" />
                آپلود دسته‌ای
              </button>
              {selectedProducts.size > 0 && (
                <button
                  onClick={handleBulkDelete}
                  className="flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                >
                  <Trash2 className="w-4 h-4 ml-2" />
                  حذف ({selectedProducts.size})
                </button>
              )}
            </div>

            <div className="flex items-center space-x-4 space-x-reverse">
              <div className="flex items-center bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setViewMode('table')}
                  className={`p-2 rounded-md transition-colors ${
                    viewMode === 'table' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'
                  }`}
                >
                  <List className="w-4 h-4" />
                </button>
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-2 rounded-md transition-colors ${
                    viewMode === 'grid' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'
                  }`}
                >
                  <Grid className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 mb-6">
          <div className="flex flex-wrap items-center gap-4">
            <div className="flex-1 min-w-64">
              <div className="relative">
                <Search className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="جستجوی محصولات..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                />
              </div>
            </div>

            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
            >
              <option value="all">همه وضعیت‌ها</option>
              <option value="active">فعال</option>
              <option value="draft">پیش‌نویس</option>
              <option value="archived">آرشیو</option>
            </select>

            <select
              value={filterCategory}
              onChange={(e) => setFilterCategory(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
            >
              <option value="all">همه دسته‌ها</option>
              <option value="food">غذا و نوشیدنی</option>
              <option value="home">خانه و باغ</option>
              <option value="electronics">الکترونیک</option>
            </select>

            <button className="flex items-center px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              <Filter className="w-4 h-4 ml-2" />
              فیلترهای بیشتر
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Category Manager */}
          <div className="lg:col-span-1">
            <CategoryManager categories={categories} onUpdate={setCategories} />
          </div>

          {/* Products List/Grid */}
          <div className="lg:col-span-3">
            {viewMode === 'table' ? (
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="w-12 p-4">
                          <input
                            type="checkbox"
                            checked={selectedProducts.size === filteredProducts.length && filteredProducts.length > 0}
                            onChange={handleSelectAll}
                            className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                          />
                        </th>
                        <th className="text-right p-4 font-medium text-gray-900">محصول</th>
                        <th className="text-right p-4 font-medium text-gray-900">قیمت</th>
                        <th className="text-right p-4 font-medium text-gray-900">موجودی</th>
                        <th className="text-right p-4 font-medium text-gray-900">وضعیت</th>
                        <th className="text-right p-4 font-medium text-gray-900">فروش</th>
                        <th className="text-right p-4 font-medium text-gray-900">عملیات</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredProducts.map((product) => (
                        <tr key={product.id} className="border-b border-gray-100 hover:bg-gray-50">
                          <td className="p-4">
                            <input
                              type="checkbox"
                              checked={selectedProducts.has(product.id)}
                              onChange={() => handleSelectProduct(product.id)}
                              className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                            />
                          </td>
                          <td className="p-4">
                            <div className="flex items-center">
                              <img
                                src={product.images[0] || '/api/placeholder/50/50'}
                                alt={product.name}
                                className="w-12 h-12 rounded-lg object-cover ml-3"
                              />
                              <div>
                                <div className="font-medium text-gray-900">{product.namePersian}</div>
                                <div className="text-sm text-gray-500">{product.name}</div>
                              </div>
                            </div>
                          </td>
                          <td className="p-4">
                            <div className="font-medium">
                              {product.price.toLocaleString()} تومان
                            </div>
                            {product.originalPrice && product.originalPrice > product.price && (
                              <div className="text-sm text-gray-500 line-through">
                                {product.originalPrice.toLocaleString()} تومان
                              </div>
                            )}
                          </td>
                          <td className="p-4">
                            <div className="flex items-center">
                              <span className="ml-2">{product.stock}</span>
                              {getStockBadge(product.stock)}
                            </div>
                          </td>
                          <td className="p-4">{getStatusBadge(product.status)}</td>
                          <td className="p-4">
                            <div className="flex items-center">
                              <BarChart3 className="w-4 h-4 text-gray-400 ml-2" />
                              {product.sales}
                            </div>
                          </td>
                          <td className="p-4">
                            <div className="flex items-center space-x-2 space-x-reverse">
                              <button
                                onClick={() => {
                                  setEditingProduct(product);
                                  setShowEditor(true);
                                }}
                                className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                              >
                                <Edit className="w-4 h-4" />
                              </button>
                              <button className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors">
                                <Eye className="w-4 h-4" />
                              </button>
                              <button className="p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
                                <Copy className="w-4 h-4" />
                              </button>
                              <button className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                                <Trash2 className="w-4 h-4" />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredProducts.map((product) => (
                  <div key={product.id} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                    <div className="relative">
                      <img
                        src={product.images[0] || '/api/placeholder/300/200'}
                        alt={product.name}
                        className="w-full h-48 object-cover"
                      />
                      <div className="absolute top-2 right-2">
                        <input
                          type="checkbox"
                          checked={selectedProducts.has(product.id)}
                          onChange={() => handleSelectProduct(product.id)}
                          className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
                        />
                      </div>
                      <div className="absolute bottom-2 left-2">
                        {getStatusBadge(product.status)}
                      </div>
                    </div>
                    
                    <div className="p-4">
                      <h3 className="font-medium text-gray-900 mb-1">{product.namePersian}</h3>
                      <p className="text-sm text-gray-500 mb-3">{product.name}</p>
                      
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <div className="font-bold text-lg">
                            {product.price.toLocaleString()} تومان
                          </div>
                          {product.originalPrice && product.originalPrice > product.price && (
                            <div className="text-sm text-gray-500 line-through">
                              {product.originalPrice.toLocaleString()} تومان
                            </div>
                          )}
                        </div>
                        <div className="text-left">
                          <div className="text-sm text-gray-600">موجودی</div>
                          <div className="font-medium">{product.stock}</div>
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-1 space-x-reverse">
                          <button
                            onClick={() => {
                              setEditingProduct(product);
                              setShowEditor(true);
                            }}
                            className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors">
                            <Eye className="w-4 h-4" />
                          </button>
                          <button className="p-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
                            <Copy className="w-4 h-4" />
                          </button>
                        </div>
                        <div className="flex items-center text-sm text-gray-500">
                          <BarChart3 className="w-4 h-4 ml-1" />
                          {product.sales} فروش
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Pagination */}
            <div className="mt-6 flex items-center justify-between">
              <div className="text-sm text-gray-600">
                نمایش {filteredProducts.length} محصول از {products.length} محصول
              </div>
              <div className="flex items-center space-x-2 space-x-reverse">
                <button className="px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                  قبلی
                </button>
                <button className="px-4 py-2 bg-purple-600 text-white rounded-lg">1</button>
                <button className="px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                  بعدی
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Modals */}
        {showEditor && (
          <ProductEditor
            product={editingProduct}
            onSave={handleProductSave}
            onClose={() => {
              setShowEditor(false);
              setEditingProduct(undefined);
            }}
          />
        )}

        {showBulkUpload && (
          <BulkUpload
            onClose={() => setShowBulkUpload(false)}
            onUpload={handleBulkUpload}
          />
        )}
      </div>
    </div>
  );
};

export default ProductManagement;
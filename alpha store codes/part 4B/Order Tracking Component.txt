// src/components/order/OrderTracking.tsx
import React, { useState } from 'react';
import { Search, Package, Truck, MapPin, Clock, CheckCircle } from 'lucide-react';
import { OrderStatus } from './OrderStatus';
import { useOrder } from '../../hooks/useOrder';
import { Order } from '../../types/order';

interface TrackingEvent {
  id: string;
  status: string;
  statusPersian: string;
  description: string;
  location: string;
  timestamp: Date;
  icon: string;
}

const MOCK_TRACKING_EVENTS: TrackingEvent[] = [
  {
    id: '4',
    status: 'delivered',
    statusPersian: 'تحویل داده شد',
    description: 'مرسوله به مقصد رسید و تحویل گیرنده شد',
    location: 'تهران - آدرس مقصد',
    timestamp: new Date('2024-12-04T14:30:00'),
    icon: 'CheckCircle'
  },
  {
    id: '3',
    status: 'out_for_delivery',
    statusPersian: 'خارج از مرکز توزیع',
    description: 'مرسوله توسط پیک برای تحویل خارج شده است',
    location: 'تهران - مرکز توزیع منطقه ۱',
    timestamp: new Date('2024-12-04T09:15:00'),
    icon: 'Truck'
  },
  {
    id: '2',
    status: 'in_transit',
    statusPersian: 'در مسیر ارسال',
    description: 'مرسوله در مسیر به مقصد است',
    location: 'تهران - ترمینال بار',
    timestamp: new Date('2024-12-03T16:45:00'),
    icon: 'Package'
  },
  {
    id: '1',
    status: 'shipped',
    statusPersian: 'ارسال شده',
    description: 'مرسوله از مبدأ ارسال شد',
    location: 'اصفهان - مرکز پردازش',
    timestamp: new Date('2024-12-02T10:20:00'),
    icon: 'MapPin'
  }
];

const TRACKING_ICONS = {
  CheckCircle,
  Truck,
  Package,
  MapPin,
  Clock
};

export const OrderTracking: React.FC = () => {
  const [trackingNumber, setTrackingNumber] = useState('');
  const [searchedOrder, setSearchedOrder] = useState<Order | null>(null);
  const [isSearching, setIsSearching] = useState(false);
  const [trackingEvents, setTrackingEvents] = useState<TrackingEvent[]>([]);
  const { getOrderByNumber, getOrderStatusInfo } = useOrder();

  const handleTrackingSearch = async () => {
    if (!trackingNumber.trim()) return;

    setIsSearching(true);
    try {
      // In real app, make API call to tracking service
      const order = getOrderByNumber(trackingNumber);
      if (order) {
        setSearchedOrder(order);
        setTrackingEvents(MOCK_TRACKING_EVENTS);
      } else {
        setSearchedOrder(null);
        setTrackingEvents([]);
      }
    } catch (error) {
      console.error('Tracking search failed:', error);
    } finally {
      setIsSearching(false);
    }
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('fa-IR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  return (
    <div className="max-w-4xl mx-auto space-y-8" dir="rtl">
      {/* Tracking Search */}
      <div className="bg-white rounded-xl shadow-sm border p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">رهگیری مرسوله</h2>
        
        <div className="flex space-x-4 space-x-reverse">
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              شماره سفارش یا کد رهگیری
            </label>
            <input
              type="text"
              value={trackingNumber}
              onChange={(e) => setTrackingNumber(e.target.value)}
              placeholder="AS-2024-001 یا TR123456789"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-alpha-500 focus:border-transparent"
              onKeyPress={(e) => e.key === 'Enter' && handleTrackingSearch()}
            />
          </div>
          
          <div className="flex items-end">
            <button
              onClick={handleTrackingSearch}
              disabled={isSearching || !trackingNumber.trim()}
              className="px-6 py-3 bg-alpha-600 text-white rounded-lg hover:bg-alpha-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center transition-colors duration-200"
            >
              {isSearching ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin ml-2" />
                  جستجو...
                </>
              ) : (
                <>
                  <Search className="w-4 h-4 ml-2" />
                  رهگیری
                </>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Order Status */}
      {searchedOrder && (
        <OrderStatus
          status={searchedOrder.status}
          statusInfo={getOrderStatusInfo(searchedOrder.status)}
          createdAt={searchedOrder.createdAt}
          updatedAt={searchedOrder.updatedAt}
          trackingNumber={searchedOrder.trackingNumber}
          estimatedDelivery={searchedOrder.estimatedDelivery}
        />
      )}

      {/* Tracking Timeline */}
      {trackingEvents.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm border p-6">
          <h3 className="text-lg font-bold text-gray-900 mb-6">تاریخچه حمل و نقل</h3>
          
          <div className="relative">
            {trackingEvents.map((event, index) => {
              const IconComponent = TRACKING_ICONS[event.icon as keyof typeof TRACKING_ICONS] || Package;
              const isLatest = index === 0;
              
              return (
                <div key={event.id} className="relative flex items-start mb-8 last:mb-0">
                  {/* Timeline Line */}
                  {index < trackingEvents.length - 1 && (
                    <div className="absolute right-6 top-12 w-0.5 h-16 bg-gray-200" />
                  )}
                  
                  {/* Event Icon */}
                  <div
                    className={`relative z-10 flex items-center justify-center w-12 h-12 rounded-full border-2 ${
                      isLatest
                        ? 'bg-green-500 border-green-500 text-white'
                        : 'bg-alpha-500 border-alpha-500 text-white'
                    }`}
                  >
                    <IconComponent className="w-5 h-5" />
                  </div>
                  
                  {/* Event Details */}
                  <div className="mr-6 flex-1">
                    <div className={`p-4 rounded-lg border ${
                      isLatest 
                        ? 'bg-green-50 border-green-200' 
                        : 'bg-gray-50 border-gray-200'
                    }`}>
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h4 className={`font-bold mb-1 ${
                            isLatest ? 'text-green-900' : 'text-gray-900'
                          }`}>
                            {event.statusPersian}
                          </h4>
                          <p className={`text-sm mb-2 ${
                            isLatest ? 'text-green-800' : 'text-gray-700'
                          }`}>
                            {event.description}
                          </p>
                          <div className="flex items-center space-x-4 space-x-reverse text-xs">
                            <div className="flex items-center space-x-1 space-x-reverse">
                              <MapPin className="w-3 h-3" />
                              <span className={isLatest ? 'text-green-600' : 'text-gray-500'}>
                                {event.location}
                              </span>
                            </div>
                            <div className="flex items-center space-x-1 space-x-reverse">
                              <Clock className="w-3 h-3" />
                              <span className={isLatest ? 'text-green-600' : 'text-gray-500'}>
                                {formatDate(event.timestamp)}
                              </span>
                            </div>
                          </div>
                        </div>
                        {isLatest && (
                          <span className="bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full mr-4">
                            جدید
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* No Results */}
      {trackingNumber && !searchedOrder && !isSearching && (
        <div className="bg-white rounded-xl shadow-sm border p-6">
          <div className="text-center py-8">
            <Package className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              سفارشی یافت نشد
            </h3>
            <p className="text-gray-600 mb-4">
              شماره سفارش یا کد رهگیری وارد شده معتبر نیست
            </p>
            <div className="text-sm text-gray-500">
              <p>لطفاً موارد زیر را بررسی کنید:</p>
              <ul className="mt-2 space-y-1">
                <li>• شماره سفارش به صورت AS-YYYY-XXX باشد</li>
                <li>• کد رهگیری به صورت TR123456789 باشد</li>
                <li>• از صحت اطلاعات وارد شده اطمینان حاصل کنید</li>
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Help Section */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
        <h3 className="text-lg font-bold text-blue-900 mb-4">راهنمای رهگیری</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-blue-900 mb-2">شماره سفارش:</h4>
            <p className="text-sm text-blue-800 mb-2">
              شماره سفارش را می‌توانید در ایمیل تأیید سفارش یا صفحه سفارشات خود پیدا کنید.
            </p>
            <p className="text-xs text-blue-700 font-mono bg-blue-100 px-2 py-1 rounded">
              مثال: AS-2024-001
            </p>
          </div>
          
          <div>
            <h4 className="font-medium text-blue-900 mb-2">کد رهگیری:</h4>
            <p className="text-sm text-blue-800 mb-2">
              پس از ارسال سفارش، کد رهگیری از طریق پیامک به شما ارسال می‌شود.
            </p>
            <p className="text-xs text-blue-700 font-mono bg-blue-100 px-2 py-1 rounded">
              مثال: TR123456789
            </p>
          </div>
        </div>

        <div className="mt-6 p-4 bg-blue-100 rounded-lg">
          <p className="text-sm text-blue-900 text-center">
            در صورت داشتن مشکل در رهگیری مرسوله، با پشتیبانی تماس بگیرید: <strong>۰۲۱-۱۲۳۴۵۶۷۸</strong>
          </p>
        </div>
      </div>
    </div>
  );
};
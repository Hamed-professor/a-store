// src/components/order/OrderStatus.tsx
import React from 'react';
import { 
  Clock, 
  CheckCircle, 
  Package, 
  Truck, 
  CheckCheck, 
  X, 
  RotateCcw 
} from 'lucide-react';
import { OrderStatus as OrderStatusEnum, OrderStatusInfo } from '../../types/order';

interface OrderStatusProps {
  status: OrderStatusEnum;
  statusInfo: OrderStatusInfo;
  createdAt: Date;
  updatedAt: Date;
  trackingNumber?: string;
  estimatedDelivery?: Date;
  showTimeline?: boolean;
}

const STATUS_ICONS = {
  [OrderStatusEnum.PENDING]: Clock,
  [OrderStatusEnum.CONFIRMED]: CheckCircle,
  [OrderStatusEnum.PROCESSING]: Package,
  [OrderStatusEnum.SHIPPED]: Truck,
  [OrderStatusEnum.DELIVERED]: CheckCheck,
  [OrderStatusEnum.CANCELLED]: X,
  [OrderStatusEnum.REFUNDED]: RotateCcw
};

const STATUS_TIMELINE = [
  OrderStatusEnum.PENDING,
  OrderStatusEnum.CONFIRMED,
  OrderStatusEnum.PROCESSING,
  OrderStatusEnum.SHIPPED,
  OrderStatusEnum.DELIVERED
];

export const OrderStatus: React.FC<OrderStatusProps> = ({
  status,
  statusInfo,
  createdAt,
  updatedAt,
  trackingNumber,
  estimatedDelivery,
  showTimeline = true
}) => {
  const Icon = STATUS_ICONS[status];
  
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('fa-IR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  const getStatusColor = (statusColor: string) => {
    const colorMap: Record<string, string> = {
      yellow: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      blue: 'bg-blue-100 text-blue-800 border-blue-200',
      purple: 'bg-purple-100 text-purple-800 border-purple-200',
      indigo: 'bg-indigo-100 text-indigo-800 border-indigo-200',
      green: 'bg-green-100 text-green-800 border-green-200',
      red: 'bg-red-100 text-red-800 border-red-200',
      gray: 'bg-gray-100 text-gray-800 border-gray-200'
    };
    return colorMap[statusColor] || colorMap.gray;
  };

  const getCurrentStatusIndex = () => {
    return STATUS_TIMELINE.indexOf(status);
  };

  if (status === OrderStatusEnum.CANCELLED || status === OrderStatusEnum.REFUNDED) {
    return (
      <div className="bg-white rounded-xl shadow-sm border p-6">
        <div className="text-center">
          <div className={`inline-flex items-center px-4 py-2 rounded-full border ${getStatusColor(statusInfo.color)}`}>
            <Icon className="w-5 h-5 ml-2" />
            <span className="font-medium">{statusInfo.labelPersian}</span>
          </div>
          <p className="mt-4 text-gray-600">{statusInfo.description}</p>
          <p className="mt-2 text-sm text-gray-500">
            {status === OrderStatusEnum.CANCELLED ? 'تاریخ لغو:' : 'تاریخ استرداد:'} {formatDate(updatedAt)}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border p-6">
      {/* Current Status */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3 space-x-reverse">
          <div className={`p-3 rounded-full ${getStatusColor(statusInfo.color).replace('text-', 'bg-').replace('-800', '-500')}`}>
            <Icon className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-lg font-bold text-gray-900">
              {statusInfo.labelPersian}
            </h3>
            <p className="text-gray-600">{statusInfo.description}</p>
          </div>
        </div>
        
        <div className="text-left">
          <p className="text-sm text-gray-500">آخرین بروزرسانی</p>
          <p className="text-sm font-medium text-gray-900">
            {formatDate(updatedAt)}
          </p>
        </div>
      </div>

      {/* Tracking Number */}
      {trackingNumber && (
        <div className="bg-alpha-50 border border-alpha-200 rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-alpha-900">کد رهگیری مرسوله</p>
              <p className="text-lg font-mono text-alpha-600">{trackingNumber}</p>
            </div>
            <button className="text-alpha-600 hover:text-alpha-700 text-sm underline">
              رهگیری مرسوله
            </button>
          </div>
        </div>
      )}

      {/* Estimated Delivery */}
      {estimatedDelivery && status !== OrderStatusEnum.DELIVERED && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div className="flex items-center space-x-2 space-x-reverse">
            <Clock className="w-5 h-5 text-green-600" />
            <div>
              <p className="text-sm font-medium text-green-900">تاریخ تحویل پیش‌بینی شده</p>
              <p className="text-green-700">{formatDate(estimatedDelivery)}</p>
            </div>
          </div>
        </div>
      )}

      {/* Status Timeline */}
      {showTimeline && (
        <div className="mt-8">
          <h4 className="font-medium text-gray-900 mb-4">مراحل پردازش سفارش</h4>
          <div className="relative">
            {STATUS_TIMELINE.map((timelineStatus, index) => {
              const timelineIcon = STATUS_ICONS[timelineStatus];
              const currentIndex = getCurrentStatusIndex();
              const isCompleted = index <= currentIndex;
              const isActive = index === currentIndex;
              
              return (
                <div key={timelineStatus} className="relative flex items-center mb-6 last:mb-0">
                  {/* Connector Line */}
                  {index < STATUS_TIMELINE.length - 1 && (
                    <div
                      className={`absolute right-6 top-12 w-0.5 h-8 ${
                        index < currentIndex ? 'bg-green-500' : 'bg-gray-200'
                      }`}
                    />
                  )}
                  
                  {/* Status Icon */}
                  <div
                    className={`relative z-10 flex items-center justify-center w-12 h-12 rounded-full border-2 ${
                      isCompleted
                        ? 'bg-green-500 border-green-500 text-white'
                        : isActive
                        ? 'bg-alpha-500 border-alpha-500 text-white'
                        : 'bg-white border-gray-300 text-gray-400'
                    }`}
                  >
                    {React.createElement(timelineIcon, { className: 'w-5 h-5' })}
                  </div>
                  
                  {/* Status Info */}
                  <div className="mr-4">
                    <p
                      className={`font-medium ${
                        isActive
                          ? 'text-alpha-600'
                          : isCompleted
                          ? 'text-green-600'
                          : 'text-gray-500'
                      }`}
                    >
                      {(() => {
                        const info = {
                          [OrderStatusEnum.PENDING]: 'در انتظار تأیید',
                          [OrderStatusEnum.CONFIRMED]: 'تأیید شده',
                          [OrderStatusEnum.PROCESSING]: 'در حال پردازش',
                          [OrderStatusEnum.SHIPPED]: 'ارسال شده',
                          [OrderStatusEnum.DELIVERED]: 'تحویل داده شده'
                        };
                        return info[timelineStatus];
                      })()}
                    </p>
                    {isActive && (
                      <p className="text-sm text-gray-600 mt-1">
                        {statusInfo.description}
                      </p>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};
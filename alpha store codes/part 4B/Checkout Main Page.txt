// pages/checkout/index.tsx
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { ArrowLeft, ArrowRight, ShoppingCart, Lock } from 'lucide-react';
import { CheckoutSteps } from '../../src/components/checkout/CheckoutSteps';
import { ShippingForm } from '../../src/components/checkout/ShippingForm';
import { OrderReview } from '../../src/components/checkout/OrderReview';
import { useCheckout } from '../../src/hooks/useCheckout';
import { useOrder } from '../../src/hooks/useOrder';
import { OrderItem } from '../../src/types/order';

// Mock cart data - in real app, this would come from cart context/state
const MOCK_CART_ITEMS: OrderItem[] = [
  {
    id: '1',
    productId: '1',
    name: 'Persian Carpet',
    namePersian: 'فرش ایرانی دستبافت',
    price: 5000000,
    quantity: 1,
    image: '/images/carpet-1.jpg',
    variant: { size: '2x3', color: 'قرمز' }
  },
  {
    id: '2',
    productId: '2',
    name: 'Handmade Pottery',
    namePersian: 'سفالگری دستساز',
    price: 750000,
    quantity: 2,
    image: '/images/pottery-1.jpg'
  }
];

const CheckoutPage: React.FC = () => {
  const router = useRouter();
  const checkout = useCheckout();
  const { createOrder } = useOrder();
  const [isProcessing, setIsProcessing] = useState(false);
  const [cartItems] = useState<OrderItem[]>(MOCK_CART_ITEMS);

  // Calculate totals
  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const shippingCost = checkout.selectedShippingMethod?.price || 0;
  const tax = Math.round(subtotal * 0.09); // 9% tax
  const total = subtotal + shippingCost + tax;

  // Redirect if cart is empty
  useEffect(() => {
    if (cartItems.length === 0) {
      router.push('/cart');
    }
  }, [cartItems, router]);

  const handleNext = () => {
    if (checkout.validateCurrentStep()) {
      checkout.nextStep();
    }
  };

  const handlePrevious = () => {
    checkout.previousStep();
  };

  const handlePlaceOrder = async () => {
    if (!checkout.selectedShippingMethod) return;

    setIsProcessing(true);
    try {
      // Create order
      const order = createOrder({
        items: cartItems,
        shippingAddress: checkout.shippingAddress as any,
        billingAddress: checkout.useSameAddress 
          ? checkout.shippingAddress as any 
          : checkout.billingAddress as any,
        shippingMethod: checkout.selectedShippingMethod,
        paymentMethod: 'zarinpal', // This would come from payment step
        subtotal,
        shippingCost,
        tax,
        total,
        status: 'pending' as any,
        userId: checkout.isGuestCheckout ? undefined : 'user-123'
      });

      // Redirect to success page
      router.push(`/checkout/success?orderId=${order.id}`);
    } catch (error) {
      console.error('Failed to place order:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  const renderCurrentStep = () => {
    switch (checkout.currentStep) {
      case 0: // Shipping
        return (
          <ShippingForm
            shippingAddress={checkout.shippingAddress}
            billingAddress={checkout.billingAddress}
            useSameAddress={checkout.useSameAddress}
            selectedShippingMethod={checkout.selectedShippingMethod}
            onShippingAddressChange={checkout.updateShippingAddress}
            onBillingAddressChange={checkout.updateBillingAddress}
            onToggleSameAddress={checkout.toggleSameAddress}
            onShippingMethodSelect={checkout.selectShippingMethod}
          />
        );
      case 1: // Payment
        return (
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <h3 className="text-lg font-bold text-gray-900 mb-6">انتخاب روش پرداخت</h3>
            <div className="text-center py-8">
              <Lock className="w-12 h-12 text-alpha-600 mx-auto mb-4" />
              <p className="text-gray-600">مرحله پرداخت - این بخش در مرحله بعدی پیاده‌سازی خواهد شد</p>
            </div>
          </div>
        );
      case 2: // Review
        return (
          <OrderReview
            items={cartItems}
            shippingAddress={checkout.shippingAddress as any}
            shippingMethod={checkout.selectedShippingMethod!}
            paymentMethod="zarinpal"
            subtotal={subtotal}
            shippingCost={shippingCost}
            tax={tax}
            total={total}
            onEditShipping={() => checkout.updateStep(0)}
            onEditPayment={() => checkout.updateStep(1)}
          />
        );
      default:
        return null;
    }
  };

  if (cartItems.length === 0) {
    return <div>در حال بارگذاری...</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50" dir="rtl">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">تسویه حساب</h1>
              <p className="text-gray-600 mt-1">تکمیل اطلاعات خرید شما</p>
            </div>
            <div className="flex items-center space-x-2 space-x-reverse text-sm text-gray-600">
              <Lock className="w-4 h-4" />
              <span>خرید امن</span>
            </div>
          </div>
        </div>

        {/* Checkout Steps */}
        <CheckoutSteps
          steps={checkout.steps}
          currentStep={checkout.currentStep}
          onStepClick={checkout.updateStep}
        />

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            {renderCurrentStep()}

            {/* Navigation Buttons */}
            <div className="flex justify-between mt-8">
              <button
                onClick={handlePrevious}
                disabled={checkout.currentStep === 0}
                className="flex items-center px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
              >
                <ArrowRight className="w-4 h-4 ml-2" />
                مرحله قبل
              </button>

              {checkout.currentStep < checkout.steps.length - 1 ? (
                <button
                  onClick={handleNext}
                  disabled={!checkout.validateCurrentStep()}
                  className="flex items-center px-6 py-3 bg-alpha-600 text-white rounded-lg hover:bg-alpha-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
                >
                  مرحله بعد
                  <ArrowLeft className="w-4 h-4 mr-2" />
                </button>
              ) : (
                <button
                  onClick={handlePlaceOrder}
                  disabled={!checkout.validateCurrentStep() || isProcessing}
                  className="flex items-center px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 font-medium"
                >
                  {isProcessing ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin ml-2" />
                      در حال پردازش...
                    </>
                  ) : (
                    <>
                      تأیید و ثبت سفارش
                      <ShoppingCart className="w-4 h-4 mr-2" />
                    </>
                  )}
                </button>
              )}
            </div>
          </div>

          {/* Order Summary Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm border p-6 sticky top-8">
              <h3 className="text-lg font-bold text-gray-900 mb-4">خلاصه سفارش</h3>
              
              {/* Items */}
              <div className="space-y-3 mb-6 max-h-64 overflow-y-auto">
                {cartItems.map(item => (
                  <div key={item.id} className="flex items-center space-x-3 space-x-reverse">
                    <img
                      src={item.image}
                      alt={item.namePersian}
                      className="w-12 h-12 object-cover rounded-lg"
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = '/images/placeholder.jpg';
                      }}
                    />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {item.namePersian}
                      </p>
                      <p className="text-xs text-gray-500">
                        تعداد: {item.quantity}
                      </p>
                    </div>
                    <p className="text-sm font-medium text-alpha-600">
                      {new Intl.NumberFormat('fa-IR').format(item.price * item.quantity)} تومان
                    </p>
                  </div>
                ))}
              </div>

              {/* Summary */}
              <div className="space-y-3 border-t pt-4">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">مجموع محصولات:</span>
                  <span className="text-gray-900">
                    {new Intl.NumberFormat('fa-IR').format(subtotal)} تومان
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">هزینه ارسال:</span>
                  <span className="text-gray-900">
                    {new Intl.NumberFormat('fa-IR').format(shippingCost)} تومان
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">مالیات:</span>
                  <span className="text-gray-900">
                    {new Intl.NumberFormat('fa-IR').format(tax)} تومان
                  </span>
                </div>
                <hr className="border-gray-200" />
                <div className="flex justify-between text-lg font-bold">
                  <span>مجموع نهایی:</span>
                  <span className="text-alpha-600">
                    {new Intl.NumberFormat('fa-IR').format(total)} تومان
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;
# 📁 راهنمای کامل فایل‌های Α Store Backend

## 🗂️ ساختار کلی پروژه

```
alpha-store-backend/
├── 📁 services/
│   ├── 📁 payments/
│   │   ├── 📄 zarinpalService.js
│   │   ├── 📄 payirService.js
│   │   └── 📄 nextpayService.js
│   ├── 📁 media/
│   │   └── 📄 cloudinaryService.js
│   ├── 📁 notifications/
│   │   ├── 📄 emailService.js
│   │   └── 📄 smsService.js
│   └── 📁 integration/
│       ├── 📄 enamadService.js
│       ├── 📄 postalService.js
│       └── 📄 currencyService.js
├── 📁 controllers/
│   ├── 📄 paymentController.js
│   ├── 📄 mediaController.js
│   ├── 📄 documentController.js
│   └── 📄 integrationController.js
├── 📁 models/
│   ├── 📄 Payment.js
│   └── 📄 Media.js
├── 📁 routes/
│   ├── 📄 payments.js
│   ├── 📄 media.js
│   ├── 📄 documents.js
│   └── 📄 integration.js
├── 📁 middleware/
│   ├── 📄 rateLimiter.js
│   └── 📄 validation.js
├── 📁 utils/
│   └── 📄 security.js
├── 📁 templates/
│   └── 📁 email/
│       ├── 📁 fa/
│       │   ├── 📄 order-confirmation.html
│       │   ├── 📄 payment-receipt.html
│       │   └── 📄 welcome.html
│       └── 📁 en/
│           ├── 📄 order-confirmation.html
│           ├── 📄 payment-receipt.html
│           └── 📄 welcome.html
├── 📄 app.js
├── 📄 package.json
└── 📄 .env
```

---

## 🚀 مراحل نصب و راه‌اندازی

### مرحله ۱: ایجاد ساختار پوشه‌ها

```bash
mkdir alpha-store-backend
cd alpha-store-backend

# ایجاد پوشه‌های اصلی
mkdir services controllers models routes middleware utils templates
mkdir services/payments services/media services/notifications services/integration
mkdir templates/email templates/email/fa templates/email/en
```

### مرحله ۲: نصب وابستگی‌ها

```bash
npm init -y
npm install express mongoose axios cloudinary multer multer-storage-cloudinary
npm install nodemailer pdfkit bcryptjs jsonwebtoken express-rate-limit
npm install rate-limit-redis redis express-validator helmet xss cors dotenv
```

### مرحله ۳: فایل‌های اصلی

#### 📄 `package.json`
```json
{
  "name": "alpha-store-backend",
  "version": "1.0.0",
  "description": "Α Store Backend APIs",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "axios": "^1.5.0",
    "cloudinary": "^1.40.0",
    "multer": "^1.4.5-lts.1",
    "multer-storage-cloudinary": "^4.0.0",
    "nodemailer": "^6.9.4",
    "pdfkit": "^0.13.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "express-rate-limit": "^6.10.0",
    "rate-limit-redis": "^3.0.1",
    "redis": "^4.6.8",
    "express-validator": "^7.0.1",
    "helmet": "^7.0.0",
    "xss": "^1.0.14",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
```

#### 📄 `.env` (متغیرهای محیطی)
```env
# Database
MONGODB_URI=mongodb://localhost:27017/alphastore

# JWT
JWT_SECRET=your_super_secure_jwt_secret_here

# Payment Gateways
ZARINPAL_MERCHANT_ID=your_zarinpal_merchant_id
ZARINPAL_WEBHOOK_SECRET=your_webhook_secret
PAYIR_API_KEY=your_payir_api_key
NEXTPAY_API_KEY=your_nextpay_api_key

# Cloudinary
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# Email Service
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password
SMTP_FROM=noreply@alphastore.ir

# SMS Service
SMS_API_KEY=your_sms_api_key
SMS_USERNAME=your_sms_username
SMS_PASSWORD=your_sms_password
SMS_LINE_NUMBER=your_sms_line_number

# Other Services
ENAMAD_API_KEY=your_enamad_api_key
IRAN_POST_API_KEY=your_post_api_key
CURRENCY_API_KEY=your_currency_api_key

# Redis (برای Rate Limiting)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Frontend
FRONTEND_URL=http://localhost:3000

# Server
PORT=5000
NODE_ENV=development
```

#### 📄 `app.js` (فایل اصلی سرور)
```javascript
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const SecurityUtils = require('./utils/security');
const { apiLimiter } = require('./middleware/rateLimiter');

const app = express();

// Security middleware
app.use(SecurityUtils.configureSecurityHeaders());
app.use(cors({
  origin: process.env.FRONTEND_URL,
  credentials: true
}));

// Rate limiting
app.use('/api', apiLimiter);

// Body parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Database connection
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('✅ MongoDB connected'))
  .catch(err => console.error('❌ MongoDB connection error:', err));

// Routes
app.use('/api/payments', require('./routes/payments'));
app.use('/api/media', require('./routes/media'));
app.use('/api/documents', require('./routes/documents'));
app.use('/api/integration', require('./routes/integration'));

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    success: true, 
    message: 'Α Store Backend is running!',
    timestamp: new Date().toISOString()
  });
});

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    message: 'خطای سرور'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'مسیر یافت نشد'
  });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`📊 Environment: ${process.env.NODE_ENV}`);
});
```

---

## 📋 چک‌لیست راه‌اندازی

### ✅ مرحله ۱: فایل‌های اصلی
- [ ] `package.json` ساخته شد
- [ ] `.env` با تنظیمات شخصی ساخته شد  
- [ ] `app.js` ساخته شد

### ✅ مرحله ۲: Services (خدمات)
از artifact اصلی کپی کنید:
- [ ] `services/payments/zarinpalService.js`
- [ ] `services/payments/payirService.js`
- [ ] `services/payments/nextpayService.js`
- [ ] `services/media/cloudinaryService.js`
- [ ] `services/notifications/emailService.js`
- [ ] `services/notifications/smsService.js`
- [ ] `services/integration/enamadService.js`
- [ ] `services/integration/postalService.js`
- [ ] `services/integration/currencyService.js`

### ✅ مرحله ۳: Controllers (کنترلرها)
- [ ] `controllers/paymentController.js`
- [ ] `controllers/mediaController.js`
- [ ] `controllers/documentController.js`
- [ ] `controllers/integrationController.js`

### ✅ مرحله ۴: Models (مدل‌های دیتابیس)
- [ ] `models/Payment.js`
- [ ] `models/Media.js`

### ✅ مرحله ۵: Routes (مسیرها)
- [ ] `routes/payments.js`
- [ ] `routes/media.js`
- [ ] `routes/documents.js`
- [ ] `routes/integration.js`

### ✅ مرحله ۶: Middleware و Utils
- [ ] `middleware/rateLimiter.js`
- [ ] `middleware/validation.js`
- [ ] `utils/security.js`

### ✅ مرحله ۷: Templates (قالب‌های ایمیل)
ساده‌ترین قالب‌ها:
- [ ] `templates/email/fa/order-confirmation.html`
- [ ] `templates/email/fa/payment-receipt.html`
- [ ] `templates/email/fa/welcome.html`

---

## 🎯 دستورات اجرا

```bash
# توسعه
npm run dev

# تولید
npm start
```

---

## 🔧 تست کردن API ها

### تست سلامت سرور:
```bash
curl http://localhost:5000/api/health
```

### تست پرداخت:
```bash
curl -X POST http://localhost:5000/api/payments/request \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{"orderId": "ORDER_ID", "gateway": "zarinpal"}'
```

---

## ❗ نکات مهم

1. **حتماً فایل `.env` را پر کنید** با اطلاعات واقعی
2. **MongoDB** باید روشن باشد
3. **Redis** برای rate limiting (اختیاری)
4. **فونت فارسی** برای PDF ها در `assets/fonts/`
5. **SSL certificate** برای production

---

## 🆘 در صورت خطا

اگر خطایی دیدید:
1. `npm install` دوباره اجرا کنید
2. `.env` را چک کنید
3. MongoDB connection را بررسی کنید
4. Port 5000 آزاد باشد

**همه فایل‌ها از artifact اصلی من قابل کپی هستند! 🚀**
const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      clearError();
      await login(formData);
      if (!error) {
        onSuccess?.();
      }
    }
  };

  return (
    <div className="w-full max-w-md mx-auto bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
      <div className="text-center mb-8">
        <div className="inline-flex items-center gap-2 mb-4">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center">
            <span className="text-white font-bold text-lg">α</span>
          </div>
          <h1 className="text-2xl font-bold text-gray-900">α Store</h1>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 mb-2">ورود به حساب کاربری</h2>
        <p className="text-gray-600">به فروشگاه لوکس α Store خوش آمدید</p>
      </div>

      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center gap-2">
            <div className="w-5 h-5 rounded-full bg-red-500 flex items-center justify-center flex-shrink-0">
              <span className="text-white text-xs">!</span>
            </div>
            <p className="text-red-700 text-sm">{error}</p>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6" dir="rtl">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ایمیل یا شماره تلفن
          </label>
          <div className="relative">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              <Mail className="w-5 h-5" />
            </div>
            <input
              type="text"
              value={formData.emailOrPhone}
              onChange={(e) => setFormData(prev => ({ ...prev, emailOrPhone: e.target.value }))}
              placeholder="user@example.com یا ۰۹۱۲۳۴۵۶۷۸۹"
              className={`w-full pl-12 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                errors.emailOrPhone ? 'border-red-300' : 'border-gray-300'
              }`}
            />
          </div>
          {errors.emailOrPhone && (
            <p className="text-red-500 text-sm mt-1">{errors.emailOrPhone}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            رمز عبور
          </label>
          <div className="relative">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              <Lock className="w-5 h-5" />
            </div>
            <input
              type={showPassword ? 'text' : 'password'}
              value={formData.password}
              onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
              placeholder="رمز عبور خود را وارد کنید"
              className={`w-full pl-12 pr-12 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                errors.password ? 'border-red-300' : 'border-gray-300'
              }`}
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
            >
              {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
            </button>
          </div>
          {errors.password && (
            <p className="text-red-500 text-sm mt-1">{errors.password}</p>
          )}
        </div>

        <div className="flex items-center justify-between">
          <button
            type="button"
            onClick={onForgotPassword}
            className="text-sm text-purple-600 hover:text-purple-700 transition-colors"
          >
            فراموشی رمز عبور
          </button>
          <label className="flex items-center gap-2 cursor-pointer">
            <input
              type="checkbox"
              checked={formData.rememberMe}
              onChange={(e) => setFormData(prev => ({ ...prev, rememberMe: e.target.checked }))}
              className="w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
            />
            <span className="text-sm text-gray-700">مرا به خاطر بسپار</span>
          </label>
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className={`w-full py-3 px-4 rounded-lg text-white font-medium transition-all duration-200 ${
            isLoading
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 transform hover:scale-[1.02] active:scale-[0.98]'
          }`}
        >
          {isLoading ? (
            <div className="flex items-center justify-center gap-2">
              <Loader className="w-5 h-5 animate-spin" />
              <span>در حال ورود...</span>
            </div>
          ) : (
            'ورود به حساب'
          )}
        </button>

        <div className="text-center pt-4">
          <p className="text-gray-600">
            حساب کاربری ندارید؟{' '}
            <button
              type="button"
              onClick={onSwitchToRegister}
              className="text-purple-600 hover:text-purple-700 font-medium transition-colors"
            >
              ثبت نام کنید
            </button>
          </p>
        </div>
      </form>
    </div>
  );
};

// Register Form Component
const RegisterForm = ({ onSwitchToLogin, onSuccess }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    acceptTerms: false,
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState({});
  const { register, isLoading, error, clearError } = React.useContext(AuthContext);

  const validateStep = (step) => {
    const newErrors = {};
    
    if (step >= 1) {
      if (!formData.firstName.trim()) newErrors.firstName = 'وارد کردن نام الزامی است';
      if (!formData.lastName.trim()) newErrors.lastName = 'وارد کردن نام خانوادگی الزامی است';
    }
    
    if (step >= 2) {
      if (!formData.email.trim()) newErrors.email = 'وارد کردن ایمیل الزامی است';
      if (!formData.phone.trim()) newErrors.phone = 'وارد کردن شماره تلفن الزامی است';
    }
    
    if (step >= 3) {
      if (!formData.password) newErrors.password = 'وارد کردن رمز عبور الزامی است';
      if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = 'تکرار رمز عبور با رمز عبور مطابقت ندارد';
      }
      if (!formData.acceptTerms) newErrors.acceptTerms = 'پذیرش قوانین و مقررات الزامی است';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep) && currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateStep(3)) {
      clearError();
      await register(formData);
      if (!error) {
        onSuccess?.(formData);
      }
    }
  };

  const getPasswordStrength = (password) => {
    let score = 0;
    if (password.length >= 8) score += 1;
    if (/[a-z]/.test(password)) score += 1;
    if (/[A-Z]/.test(password)) score += 1;
    if (/[0-9]/.test(password)) score += 1;
    if (/[^A-Za-z0-9]/.test(password)) score += 1;
    
    if (score <= 2) return { message: 'ضعیف', color: 'red', width: 33 };
    if (score <= 3) return { message: 'متوسط', color: 'yellow', width: 66 };
    return { message: 'قوی', color: 'green', width: 100 };
  };

  const passwordStrength = getPasswordStrength(formData.password);

  return (
    <div className="w-full max-w-md mx-auto bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
      <div className="text-center mb-8">
        <div className="inline-flex items-center gap-2 mb-4">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center">
            <span className="text-white font-bold text-lg">α</span>
          </div>
          <h1 className="text-2xl font-bold text-gray-900">α Store</h1>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 mb-2">ایجاد حساب کاربری</h2>
        <p className="text-gray-600">عضو خانواده α Store شوید</p>
      </div>

      {/* Step Indicator */}
      <div className="flex items-center justify-center mb-8">
        {[1, 2, 3].map((step, index) => (
          <React.Fragment key={step}>
            <div
              className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-all ${
                step === currentStep
                  ? 'bg-purple-600 text-white scale-110'
                  : step < currentStep
                  ? 'bg-green-500 text-white'
                  : 'bg-gray-200 text-gray-500'
              }`}
            >
              {step < currentStep ? <Check className="w-5 h-5" /> : step}
            </div>
            {index < 2 && (
              <div
                className={`w-12 h-1 mx-2 transition-all ${
                  step < currentStep ? 'bg-green-500' : 'bg-gray-200'
                }`}
              />
            )}
          </React.Fragment>
        ))}
      </div>

      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center gap-2">
            <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0" />
            <p className="text-red-700 text-sm">{error}</p>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6" dir="rtl">
        {currentStep === 1 && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">اطلاعات شخصی</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">نام</label>
              <input
                type="text"
                value={formData.firstName}
                onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                placeholder="نام خود را وارد کنید"
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                  errors.firstName ? 'border-red-300' : 'border-gray-300'
                }`}
              />
              {errors.firstName && <p className="text-red-500 text-sm mt-1">{errors.firstName}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">نام خانوادگی</label>
              <input
                type="text"
                value={formData.lastName}
                onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                placeholder="نام خانوادگی خود را وارد کنید"
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                  errors.lastName ? 'border-red-300' : 'border-gray-300'
                }`}
              />
              {errors.lastName && <p className="text-red-500 text-sm mt-1">{errors.lastName}</p>}
            </div>
          </div>
        )}

        {currentStep === 2 && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">اطلاعات تماس</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">ایمیل</label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                placeholder="user@example.com"
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                  errors.email ? 'border-red-300' : 'border-gray-300'
                }`}
                dir="ltr"
              />
              {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">شماره تلفن</label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                placeholder="۰۹۱۲۳۴۵۶۷۸۹"
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                  errors.phone ? 'border-red-300' : 'border-gray-300'
                }`}
              />
              {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
            </div>
          </div>
        )}

        {currentStep === 3 && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">تنظیم رمز عبور</h3>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">رمز عبور</label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={formData.password}
                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
                  placeholder="رمز عبور خود را وارد کنید"
                  className={`w-full pl-12 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                    errors.password ? 'border-red-300' : 'border-gray-300'
                  }`}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              {errors.password && <p className="text-red-500 text-sm mt-1">{errors.password}</p>}
              
              {formData.password && (
                <div className="mt-2">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-xs text-gray-600">قدرت رمز عبور:</span>
                    <span className={`text-xs font-medium ${
                      passwordStrength.color === 'red' ? 'text-red-500' : 
                      passwordStrength.color === 'yellow' ? 'text-yellow-500' : 
                      'text-green-500'
                    }`}>
                      {passwordStrength.message}
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full transition-all duration-300 ${
                        passwordStrength.color === 'red' ? 'bg-red-500' : 
                        passwordStrength.color === 'yellow' ? 'bg-yellow-500' : 
                        'bg-green-500'
                      }`}
                      style={{ width: `${passwordStrength.width}%` }}
                    />
                  </div>
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">تکرار رمز عبور</label>
              <div className="relative">
                <input
                  type={showConfirmPassword ? 'text' : 'password'}
                  value={formData.confirmPassword}
                  onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  placeholder="رمز عبور خود را مجدداً وارد کنید"
                  className={`w-full pl-12 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                    errors.confirmPassword ? 'border-red-300' : 'border-gray-300'
                  }`}
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                >
                  {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              {errors.confirmPassword && <p className="text-red-500 text-sm mt-1">{errors.confirmPassword}</p>}
            </div>

            <div className="mb-6">
              <label className="flex items-start gap-3 cursor-pointer">
                <input
                  type="checkbox"
                  checked={formData.acceptTerms}
                  onChange={(e) => setFormData(prev => ({ ...prev, acceptTerms: e.target.checked }))}
                  className="w-5 h-5 text-purple-600 border-gray-300 rounded focus:ring-purple-500 mt-0.5"
                />
                <div className="text-sm text-gray-700">
                  <span>با </span>
                  <a href="#" className="text-purple-600 hover:text-purple-700 font-medium">
                    قوانین و مقررات
                  </a>
                  <span> و </span>
                  <a href="#" className="text-purple-600 hover:text-purple-700 font-medium">
                    حریم خصوصی
                  </a>
                  <span> α Store موافقم</span>
                </div>
              </label>
              {errors.acceptTerms && <p className="text-red-500 text-sm mt-1">{errors.acceptTerms}</p>}
            </div>
          </div>
        )}

        {/* Navigation Buttons */}
        <div className="flex gap-4">
          {currentStep > 1 && (
            <button
              type="button"
              onClick={prevStep}
              className="flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 transition-colors flex items-center justify-center gap-2"
            >
              <ChevronRight className="w-5 h-5" />
              <span>قبلی</span>
            </button>
          )}
          
          {currentStep < 3 ? (
            <button
              type="button"
              onClick={nextStep}
              className="flex-1 py-3 px-4 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-indigo-700 transition-all transform hover:scale-[1.02] active:scale-[0.98] flex items-center justify-center gap-2"
            >
              <span>بعدی</span>
              <ChevronLeft className="w-5 h-5" />
            </button>
          ) : (
            <button
              type="submit"
              disabled={isLoading}
              className={`flex-1 py-3 px-4 rounded-lg text-white font-medium transition-all duration-200 ${
                isLoading
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 transform hover:scale-[1.02] active:scale-[0.98]'
              }`}
            >
              {isLoading ? (
                <div className="flex items-center justify-center gap-2">
                  <Loader className="w-5 h-5 animate-spin" />
                  <span>در حال ایجاد حساب...</span>
                </div>
              ) : (
                'ایجاد حساب کاربری'
              )}
            </button>
          )}
        </div>

        <div className="text-center pt-4">
          <p className="text-gray-600">
            حساب کاربری دارید؟{' '}
            <button
              type="button"
              onClick={onSwitchToLogin}
              className="text-purple-600 hover:text-purple-700 font-medium transition-colors"
            >
              وارد شوید
            </button>
          </p>
        </div>
      </form>
    </div>
  );
};

// Main Demo Component with Alpha Store Integration
export default function AlphaStoreAuthDemo() {
  const [authMode, setAuthMode] = useState(null); // null, 'login', 'register'
  const [cartItems, setCartItems] = useState([]);

  const { user, isAuthenticated, logout } = React.useContext(AuthContext);

  const addToCart = (product) => {
    if (!isAuthenticated) {
      setAuthMode('login');
      return;
    }
    setCartItems(prev => [...prev, { ...product, id: Date.now() }]);
  };

  const handleAuthSuccess = () => {
    setAuthMode(null);
  };

  return (
    <AuthProvider>
      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b" dir="rtl">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              {/* Logo */}
              <div className="flex items-center gap-2">
                <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center">
                  <span className="text-white font-bold text-lg">α</span>
                </div>
                <h1 className="text-2xl font-bold text-gray-900">α Store</h1>
              </div>

              {/* User Actions */}
              <div className="flex items-center gap-4">
                <button className="p-2 text-gray-600 hover:text-purple-600 transition-colors">
                  <Search className="w-6 h-6" />
                </button>
                
                <button className="p-2 text-gray-600 hover:text-purple-600 transition-colors">
                  <Heart className="w-6 h-6" />
                </button>

                <div className="relative">
                  <button className="p-2 text-gray-600 hover:text-purple-600 transition-colors">
                    <ShoppingCart className="w-6 h-6" />
                  </button>
                  {cartItems.length > 0 && (
                    <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                      {cartItems.length}
                    </span>
                  )}
                </div>

                {isAuthenticated ? (
                  <div className="relative group">
                    <button className="flex items-center gap-2 p-2 text-gray-700 hover:text-purple-600 transition-colors">
                      <User className="w-6 h-6" />
                      <span className="text-sm font-medium">{user.firstName}</span>
                    </button>
                    <div className="absolute left-0 mt-2 w-48 bg-white rounded-lg shadow-lg border opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                      <div className="p-4 border-b">
                        <p className="font-medium text-gray-900">{user.firstName} {user.lastName}</p>
                        <p className="text-sm text-gray-600">{user.email}</p>
                      </div>
                      <div className="p-2">
                        <button
                          onClick={logout}
                          className="w-full text-right px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded transition-colors"
                        >
                          خروج از حساب
                        </button>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="flex gap-2">
                    <button
                      onClick={() => setAuthMode('login')}
                      className="px-4 py-2 text-sm font-medium text-purple-600 hover:text-purple-700 transition-colors"
                    >
                      ورود
                    </button>
                    <button
                      onClick={() => setAuthMode('register')}
                      className="px-4 py-2 text-sm font-medium bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                    >
                      ثبت نام
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" dir="rtl">
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              به α Store خوش آمدید
            </h1>
            <p className="text-lg text-gray-600 mb-8">
              فروشگاه لوکس محصولات منحصر به فرد
            </p>
          </div>

          {/* Sample Products */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {[1, 2, 3, 4, 5, 6].map((id) => (
              <div key={id} className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:scale-105">
                <div className="h-64 bg-gradient-to-br from-purple-100 to-indigo-100 flex items-center justify-center">
                  <span className="text-4xl text-purple-600 font-bold">α</span>
                </div>
                <div className="p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    محصول لوکس {id}
                  </h3>
                  <p className="text-gray-600 mb-4">
                    توضیحات کوتاه محصول با کیفیت بالا و طراحی منحصر به فرد
                  </p>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-2xl font-bold text-purple-600">
                        {(id * 150000).toLocaleString('fa-IR')}
                      </span>
                      <span className="text-sm text-gray-600">تومان</span>
                    </div>
                    <button
                      onClick={() => addToCart({
                        id,
                        name: `محصول لوکس ${id}`,
                        price: id * 150000,
                      })}
                      className="px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all transform hover:scale-105 active:scale-95"
                    >
                      افزودن به سبد
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Cart Summary */}
          {cartItems.length > 0 && (
            <div className="mt-12 bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">سبد خرید</h2>
              <div className="space-y-3">
                {cartItems.map((item) => (
                  <div key={item.id} className="flex items-center justify-between py-2 border-b border-gray-100">
                    <span className="text-gray-700">{item.name}</span>
                    <span className="font-semibold text-purple-600">
                      {item.price.toLocaleString('fa-IR')} تومان
                    </span>
                  </div>
                ))}
                <div className="flex items-center justify-between pt-3 text-lg font-bold">
                  <span>مجموع:</span>
                  <span className="text-purple-600">
                    {cartItems.reduce((sum, item) => sum + item.price, 0).toLocaleString('fa-IR')} تومان
                  </span>
                </div>
              </div>
            </div>
          )}
        </main>

        {/* Auth Modal */}
        {authMode && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div 
              className="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm"
              onClick={() => setAuthMode(null)}
            />
            <div className="relative max-w-md w-full max-h-[90vh] overflow-y-auto">
              <button
                onClick={() => setAuthMode(null)}
                className="absolute top-4 left-4 z-10 p-2 bg-white rounded-full shadow-lg hover:bg-gray-50 transition-colors"
              >
                <X className="w-5 h-5 text-gray-600" />
              </button>
              
              {authMode === 'login' ? (
                <LoginForm
                  onSwitchToRegister={() => setAuthMode('register')}
                  onForgotPassword={() => {/* Handle forgot password */}}
                  onSuccess={handleAuthSuccess}
                />
              ) : (
                <RegisterForm
                  onSwitchToLogin={() => setAuthMode('login')}
                  onSuccess={handleAuthSuccess}
                />
              )}
            </div>
          </div>
        )}

        {/* Background Decorations */}
        <div className="fixed top-0 left-0 w-full h-full overflow-hidden pointer-events-none -z-10">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-blob"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-indigo-300 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-blob animation-delay-2000"></div>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-blob animation-delay-4000"></div>
        </div>

        <style jsx global>{`
          @keyframes blob {
            0% { transform: translate(0px, 0px) scale(1); }
            33% { transform: translate(30px, -50px) scale(1.1); }
            66% { transform: translate(-20px, 20px) scale(0.9); }
            100% { transform: translate(0px, 0px) scale(1); }
          }
          
          .animate-blob {
            animation: blob 7s infinite;
          }
          
          .animation-delay-2000 {
            animation-delay: 2s;
          }
          
          .animation-delay-4000 {
            animation-delay: 4s;
          }
        `}</style>
      </div>
    </AuthProvider>
  );
}
                  import React, { useState } from 'react';
import { User, ShoppingCart, Heart, Search, Menu, X, Eye, EyeOff, Mail, Phone, Lock, Smartphone, ArrowLeft, Loader, CheckCircle, AlertCircle, ChevronRight, ChevronLeft, Check, RefreshCw } from 'lucide-react';

// Mock Auth Context (simplified version)
const AuthContext = React.createContext({
  user: null,
  isAuthenticated: false,
  login: async () => {},
  register: async () => {},
  logout: () => {},
  isLoading: false,
  error: null,
  clearError: () => {},
});

// Simplified Auth Provider for demo
const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const login = async (data) => {
    setIsLoading(true);
    setError(null);
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      setUser({
        id: '1',
        firstName: 'کاربر',
        lastName: 'آلفا استور',
        email: data.emailOrPhone,
        avatar: null,
      });
    } catch (err) {
      setError('خطا در ورود به حساب کاربری');
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (data) => {
    setIsLoading(true);
    setError(null);
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      setUser({
        id: '2',
        firstName: data.firstName,
        lastName: data.lastName,
        email: data.email,
        avatar: null,
      });
    } catch (err) {
      setError('خطا در ایجاد حساب کاربری');
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    setError(null);
  };

  const clearError = () => setError(null);

  return (
    <AuthContext.Provider value={{
      user,
      isAuthenticated: !!user,
      login,
      register,
      logout,
      isLoading,
      error,
      clearError,
    }}>
      {children}
    </AuthContext.Provider>
  );
};

// Login Form Component
const LoginForm = ({ onSwitchToRegister, onForgotPassword, onSuccess }) => {
  const [formData, setFormData] = useState({ emailOrPhone: '', password: '', rememberMe: false });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});
  const { login, isLoading, error, clearError } = React.useContext(AuthContext);

  const validateForm = () => {
    const newErrors = {};
    if (!formData.emailOrPhone.trim()) {
      newErrors.emailOrPhone = 'وارد کردن ایمیل یا شماره تلفن الزامی است';
    }
    if (!formData.password) {
      newErrors.password = 'وارد کردن رمز عبور الزامی است';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      clearError();
      await login(formData);
      if (!error) {
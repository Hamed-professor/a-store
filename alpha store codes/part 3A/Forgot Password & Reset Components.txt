// src/components/auth/ForgotPassword.tsx
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { 
  Mail, 
  Phone, 
  ArrowLeft, 
  Loader, 
  CheckCircle,
  AlertCircle 
} from 'lucide-react';
import { forgotPasswordSchema } from '../../schemas/authSchemas';
import { ForgotPasswordData } from '../../types/auth';
import { validateEmail, validateIranianPhone, convertToEnglishDigits } from '../../utils/auth';

interface ForgotPasswordProps {
  onBack: () => void;
  onSuccess: (data: ForgotPasswordData) => void;
}

export const ForgotPassword: React.FC<ForgotPasswordProps> = ({
  onBack,
  onSuccess,
}) => {
  const [method, setMethod] = useState<'email' | 'sms'>('email');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isSuccess, setIsSuccess] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    setValue,
  } = useForm<ForgotPasswordData>({
    resolver: yupResolver(forgotPasswordSchema),
    mode: 'onChange',
    defaultValues: {
      method: 'email',
    },
  });

  const emailOrPhone = watch('emailOrPhone') || '';

  // Auto-detect method based on input
  React.useEffect(() => {
    if (emailOrPhone) {
      const cleanInput = convertToEnglishDigits(emailOrPhone.trim());
      if (validateEmail(cleanInput)) {
        setMethod('email');
        setValue('method', 'email');
      } else if (validateIranianPhone(cleanInput)) {
        setMethod('sms');
        setValue('method', 'sms');
      }
    }
  }, [emailOrPhone, setValue]);

  const onSubmit = async (data: ForgotPasswordData) => {
    setIsLoading(true);
    setError(null);

    try {
      // Convert Persian digits to English
      const cleanData = {
        ...data,
        emailOrPhone: convertToEnglishDigits(data.emailOrPhone.trim()),
      };

      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setIsSuccess(true);
      
      setTimeout(() => {
        onSuccess(cleanData);
      }, 2000);
      
    } catch (err) {
      setError('خطا در ارسال درخواست. لطفاً دوباره تلاش کنید.');
    } finally {
      setIsLoading(false);
    }
  };

  if (isSuccess) {
    return (
      <div className="w-full max-w-md mx-auto bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
            <CheckCircle className="w-8 h-8 text-green-500" />
          </div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">ارسال موفق</h2>
          <p className="text-gray-600 mb-4">
            {method === 'email' 
              ? 'لینک بازیابی رمز عبور به ایمیل شما ارسال شد'
              : 'کد بازیابی به شماره تلفن شما ارسال شد'
            }
          </p>
          <div className="animate-spin inline-block w-6 h-6 border-2 border-purple-600 border-t-transparent rounded-full"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-md mx-auto bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
      {/* Header */}
      <div className="text-center mb-8">
        <div className="inline-flex items-center gap-2 mb-4">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center">
            <span className="text-white font-bold text-lg">α</span>
          </div>
          <h1 className="text-2xl font-bold text-gray-900">α Store</h1>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 mb-2">بازیابی رمز عبور</h2>
        <p className="text-gray-600">ایمیل یا شماره تلفن خود را وارد کنید</p>
      </div>

      {/* Icon */}
      <div className="flex justify-center mb-8">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-100 rounded-full">
          {method === 'email' ? (
            <Mail className="w-8 h-8 text-purple-600" />
          ) : (
            <Phone className="w-8 h-8 text-purple-600" />
          )}
        </div>
      </div>

      {/* Error Alert */}
      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center gap-2">
            <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0" />
            <p className="text-red-700 text-sm">{error}</p>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6" dir="rtl">
        {/* Email/Phone Input */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ایمیل یا شماره تلفن
          </label>
          <div className="relative">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              {method === 'email' ? (
                <Mail className="w-5 h-5" />
              ) : (
                <Phone className="w-5 h-5" />
              )}
            </div>
            <input
              type="text"
              {...register('emailOrPhone')}
              placeholder={
                method === 'email' 
                  ? 'user@example.com' 
                  : '۰۹۱۲۳۴۵۶۷۸۹'
              }
              className={`w-full pl-12 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                errors.emailOrPhone ? 'border-red-300' : 'border-gray-300'
              }`}
              dir={method === 'email' ? 'ltr' : 'rtl'}
            />
          </div>
          {errors.emailOrPhone && (
            <p className="text-red-500 text-sm mt-1">{errors.emailOrPhone.message}</p>
          )}
        </div>

        {/* Method Selection */}
        <div className="bg-gray-50 rounded-lg p-4">
          <p className="text-sm font-medium text-gray-700 mb-3">روش بازیابی:</p>
          <div className="space-y-2">
            <label className="flex items-center gap-3 cursor-pointer">
              <input
                type="radio"
                {...register('method')}
                value="email"
                checked={method === 'email'}
                onChange={() => setMethod('email')}
                className="w-4 h-4 text-purple-600 border-gray-300 focus:ring-purple-500"
              />
              <div className="flex items-center gap-2">
                <Mail className="w-4 h-4 text-gray-600" />
                <span className="text-sm text-gray-700">ارسال لینک به ایمیل</span>
              </div>
            </label>
            <label className="flex items-center gap-3 cursor-pointer">
              <input
                type="radio"
                {...register('method')}
                value="sms"
                checked={method === 'sms'}
                onChange={() => setMethod('sms')}
                className="w-4 h-4 text-purple-600 border-gray-300 focus:ring-purple-500"
              />
              <div className="flex items-center gap-2">
                <Phone className="w-4 h-4 text-gray-600" />
                <span className="text-sm text-gray-700">ارسال کد به تلفن همراه</span>
              </div>
            </label>
          </div>
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          disabled={isLoading || !isValid}
          className={`w-full py-3 px-4 rounded-lg text-white font-medium transition-all duration-200 ${
            isLoading || !isValid
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 transform hover:scale-[1.02] active:scale-[0.98]'
          }`}
        >
          {isLoading ? (
            <div className="flex items-center justify-center gap-2">
              <Loader className="w-5 h-5 animate-spin" />
              <span>در حال ارسال...</span>
            </div>
          ) : (
            method === 'email' ? 'ارسال لینک بازیابی' : 'ارسال کد تأیید'
          )}
        </button>

        {/* Back Button */}
        <button
          type="button"
          onClick={onBack}
          className="w-full py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 transition-colors flex items-center justify-center gap-2"
        >
          <ArrowLeft className="w-5 h-5" />
          <span>بازگشت به ورود</span>
        </button>
      </form>

      {/* Help Text */}
      <div className="mt-6 text-center">
        <p className="text-xs text-gray-500">
          اگر حساب کاربری با این اطلاعات وجود داشته باشد، پیام بازیابی ارسال خواهد شد
        </p>
      </div>
    </div>
  );
};

// src/components/auth/PasswordReset.tsx
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { 
  Lock, 
  Eye, 
  EyeOff, 
  CheckCircle, 
  Loader,
  AlertCircle 
} from 'lucide-react';
import { resetPasswordSchema } from '../../schemas/authSchemas';
import { ResetPasswordData } from '../../types/auth';
import { getPasswordStrength } from '../../utils/auth';

interface PasswordResetProps {
  token: string;
  onSuccess: () => void;
}

export const PasswordReset: React.FC<PasswordResetProps> = ({
  token,
  onSuccess,
}) => {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isSuccess, setIsSuccess] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
  } = useForm<ResetPasswordData>({
    resolver: yupResolver(resetPasswordSchema),
    mode: 'onChange',
    defaultValues: {
      token,
    },
  });

  const newPassword = watch('newPassword') || '';
  const passwordStrength = getPasswordStrength(newPassword);

  const onSubmit = async (data: ResetPasswordData) => {
    setIsLoading(true);
    setError(null);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setIsSuccess(true);
      
      setTimeout(() => {
        onSuccess();
      }, 2000);
      
    } catch (err) {
      setError('خطا در تغییر رمز عبور. لطفاً دوباره تلاش کنید.');
    } finally {
      setIsLoading(false);
    }
  };

  if (isSuccess) {
    return (
      <div className="w-full max-w-md mx-auto bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
            <CheckCircle className="w-8 h-8 text-green-500" />
          </div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">تغییر موفق</h2>
          <p className="text-gray-600 mb-4">رمز عبور شما با موفقیت تغییر یافت</p>
          <div className="animate-spin inline-block w-6 h-6 border-2 border-purple-600 border-t-transparent rounded-full"></div>
          <p className="text-sm text-gray-500 mt-2">در حال انتقال به صفحه ورود...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-md mx-auto bg-white rounded-2xl shadow-2xl p-8 border border-gray-100">
      {/* Header */}
      <div className="text-center mb-8">
        <div className="inline-flex items-center gap-2 mb-4">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center">
            <span className="text-white font-bold text-lg">α</span>
          </div>
          <h1 className="text-2xl font-bold text-gray-900">α Store</h1>
        </div>
        <h2 className="text-xl font-semibold text-gray-800 mb-2">تنظیم رمز عبور جدید</h2>
        <p className="text-gray-600">رمز عبور جدید و امن خود را وارد کنید</p>
      </div>

      {/* Icon */}
      <div className="flex justify-center mb-8">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-purple-100 rounded-full">
          <Lock className="w-8 h-8 text-purple-600" />
        </div>
      </div>

      {/* Error Alert */}
      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center gap-2">
            <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0" />
            <p className="text-red-700 text-sm">{error}</p>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6" dir="rtl">
        {/* New Password */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            رمز عبور جدید
          </label>
          <div className="relative">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              <Lock className="w-5 h-5" />
            </div>
            <input
              type={showPassword ? 'text' : 'password'}
              {...register('newPassword')}
              placeholder="رمز عبور جدید خود را وارد کنید"
              className={`w-full pl-12 pr-12 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                errors.newPassword ? 'border-red-300' : 'border-gray-300'
              }`}
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
            >
              {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
            </button>
          </div>
          {errors.newPassword && (
            <p className="text-red-500 text-sm mt-1">{errors.newPassword.message}</p>
          )}
          
          {/* Password Strength Indicator */}
          {newPassword && (
            <div className="mt-2">
              <div className="flex items-center gap-2 mb-1">
                <span className="text-xs text-gray-600">قدرت رمز عبور:</span>
                <span className={`text-xs font-medium ${
                  passwordStrength.color === 'red' ? 'text-red-500' : 
                  passwordStrength.color === 'yellow' ? 'text-yellow-500' : 
                  'text-green-500'
                }`}>
                  {passwordStrength.message}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={`h-2 rounded-full transition-all duration-300 ${
                    passwordStrength.color === 'red' ? 'bg-red-500' : 
                    passwordStrength.color === 'yellow' ? 'bg-yellow-500' : 
                    'bg-green-500'
                  }`}
                  style={{ width: `${(passwordStrength.score / 6) * 100}%` }}
                />
              </div>
            </div>
          )}
        </div>

        {/* Confirm Password */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            تکرار رمز عبور جدید
          </label>
          <div className="relative">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              <Lock className="w-5 h-5" />
            </div>
            <input
              type={showConfirmPassword ? 'text' : 'password'}
              {...register('confirmPassword')}
              placeholder="رمز عبور جدید را مجدداً وارد کنید"
              className={`w-full pl-12 pr-12 py-3 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors ${
                errors.confirmPassword ? 'border-red-300' : 'border-gray-300'
              }`}
            />
            <button
              type="button"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
            >
              {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
            </button>
          </div>
          {errors.confirmPassword && (
            <p className="text-red-500 text-sm mt-1">{errors.confirmPassword.message}</p>
          )}
        </div>

        {/* Security Tips */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="text-sm font-medium text-blue-800 mb-2">نکات امنیتی:</h4>
          <ul className="text-xs text-blue-700 space-y-1">
            <li>• حداقل ۸ کاراکتر استفاده کنید</li>
            <li>• ترکیبی از حروف کوچک و بزرگ</li>
            <li>• شامل اعداد و نمادها باشد</li>
            <li>• از اطلاعات شخصی استفاده نکنید</li>
          </ul>
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          disabled={isLoading || !isValid}
          className={`w-full py-3 px-4 rounded-lg text-white font-medium transition-all duration-200 ${
            isLoading || !isValid
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 transform hover:scale-[1.02] active:scale-[0.98]'
          }`}
        >
          {isLoading ? (
            <div className="flex items-center justify-center gap-2">
              <Loader className="w-5 h-5 animate-spin" />
              <span>در حال تغییر رمز عبور...</span>
            </div>
          ) : (
            'تغییر رمز عبور'
          )}
        </button>
      </form>
    </div>
  );
};
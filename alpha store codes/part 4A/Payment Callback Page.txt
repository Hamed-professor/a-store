// pages/payment/callback.tsx
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';
import PaymentStatusComponent from '../../src/components/payment/PaymentStatus';
import { 
  PaymentStatus, 
  PaymentVerification 
} from '../../src/types/payment';
import { 
  parseCallbackParams, 
  formatCurrency 
} from '../../src/utils/payment';

const PaymentCallback: React.FC = () => {
  const router = useRouter();
  const [status, setStatus] = useState<PaymentStatus>(PaymentStatus.PROCESSING);
  const [verification, setVerification] = useState<PaymentVerification | null>(null);
  const [error, setError] = useState<string>('');
  const [errorPersian, setErrorPersian] = useState<string>('');
  const [isVerifying, setIsVerifying] = useState(true);

  useEffect(() => {
    if (!router.isReady) return;

    const params = parseCallbackParams(router.query);
    
    if (!params.gateway) {
      setStatus(PaymentStatus.FAILED);
      setError('Gateway not specified');
      setErrorPersian('درگاه پرداخت مشخص نشده است');
      setIsVerifying(false);
      return;
    }

    // Handle immediate failures
    if (params.status === 'FAILED' || params.status === 'NOK') {
      setStatus(PaymentStatus.FAILED);
      setError('Payment was cancelled or failed');
      setErrorPersian('پرداخت لغو شد یا ناموفق بود');
      setIsVerifying(false);
      return;
    }

    // Verify the payment
    verifyPayment(params);
  }, [router.isReady, router.query]);

  const verifyPayment = async (params: any) => {
    try {
      const response = await fetch('/api/payments/verify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        },
        body: JSON.stringify(params)
      });

      const result = await response.json();

      if (result.success && result.verification) {
        setStatus(PaymentStatus.COMPLETED);
        setVerification(result.verification);
        
        // Clear cart on successful payment
        localStorage.removeItem('cart');
        
        // Store order details for later reference
        localStorage.setItem('lastOrder', JSON.stringify({
          orderId: result.verification.orderId,
          amount: result.verification.amount,
          currency: result.verification.currency,
          transactionId: result.verification.transactionId,
          completedAt: new Date().toISOString()
        }));

        // Optional: Send analytics event
        if (typeof gtag !== 'undefined') {
          gtag('event', 'purchase', {
            transaction_id: result.verification.transactionId,
            value: result.verification.amount,
            currency: result.verification.currency,
            items: JSON.parse(localStorage.getItem('purchaseItems') || '[]')
          });
        }
      } else {
        setStatus(PaymentStatus.FAILED);
        setError(result.message || 'Payment verification failed');
        setErrorPersian(result.messagePersian || 'تایید پرداخت ناموفق بود');
      }
    } catch (error) {
      console.error('Payment verification error:', error);
      setStatus(PaymentStatus.FAILED);
      setError('Network error during verification');
      setErrorPersian('خطای شبکه در هنگام تایید پرداخت');
    } finally {
      setIsVerifying(false);
    }
  };

  const handleRetry = () => {
    router.push('/checkout');
  };

  const handleGoHome = () => {
    router.push('/');
  };

  const handleViewOrders = () => {
    router.push('/dashboard/orders');
  };

  const handleDownloadReceipt = () => {
    // Receipt download is handled in the component
    console.log('Receipt download requested');
  };

  if (isVerifying) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center" dir="rtl">
        <div className="text-center">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            className="inline-block mb-4"
          >
            <Loader2 className="w-12 h-12 text-purple-600" />
          </motion.div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">
            در حال تایید پرداخت...
          </h2>
          <p className="text-gray-600">
            لطفاً شکیبا باشید
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <PaymentStatusComponent
          status={status}
          verification={verification}
          orderId={verification?.orderId}
          amount={verification?.amount}
          currency={verification?.currency as 'IRR' | 'IRT'}
          error={error}
          errorPersian={errorPersian}
          isRetryable={status === PaymentStatus.FAILED}
          onRetry={handleRetry}
          onDownloadReceipt={handleDownloadReceipt}
          onGoHome={handleGoHome}
          onViewOrders={handleViewOrders}
        />
      </div>
    </div>
  );
};

export default PaymentCallback;

// pages/payment/index.tsx
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { motion } from 'framer-motion';
import Head from 'next/head';
import PaymentMethods from '../../src/components/payment/PaymentMethods';
import PaymentGateway from '../../src/components/payment/PaymentGateway';
import { usePayment } from '../../src/hooks/usePayment';
import { PaymentFormData } from '../../src/types/payment';

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

const PaymentPage: React.FC = () => {
  const router = useRouter();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [totalAmount, setTotalAmount] = useState<number>(0);
  const [currency] = useState<'IRR' | 'IRT'>('IRT');
  const [paymentUrl, setPaymentUrl] = useState<string>('');
  const [isRedirecting, setIsRedirecting] = useState(false);

  const {
    gateways,
    selectedGateway,
    isLoading,
    isProcessing,
    error,
    orderId,
    transactionId,
    loadGateways,
    selectGateway,
    initiatePayment,
    retryPayment,
    resetPayment,
    clearError
  } = usePayment();

  useEffect(() => {
    // Load cart items from localStorage
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      const items: CartItem[] = JSON.parse(savedCart);
      setCartItems(items);
      
      const total = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      setTotalAmount(total);
    } else {
      // Redirect to cart if empty
      router.push('/cart');
    }

    // Load available gateways
    loadGateways();
  }, [loadGateways, router]);

  const handleSubmitPayment = async (formData: PaymentFormData) => {
    if (cartItems.length === 0) {
      alert('سبد خرید خالی است');
      return;
    }

    // Store purchase items for analytics
    localStorage.setItem('purchaseItems', JSON.stringify(cartItems.map(item => ({
      item_id: item.id,
      item_name: item.name,
      price: item.price,
      quantity: item.quantity
    }))));

    const success = await initiatePayment(formData, cartItems);
    
    if (success) {
      setIsRedirecting(true);
    }
  };

  const handleGatewayTimeout = () => {
    setIsRedirecting(false);
    setPaymentUrl('');
    resetPayment();
    alert('زمان پرداخت به پایان رسید. لطفاً مجدداً تلاش کنید.');
  };

  const handleCancelPayment = () => {
    setIsRedirecting(false);
    setPaymentUrl('');
    resetPayment();
    router.push('/cart');
  };

  const handleRetry = () => {
    clearError();
    retryPayment();
  };

  // Show gateway interface if redirecting
  if (isRedirecting && selectedGateway && orderId) {
    return (
      <>
        <Head>
          <title>پرداخت - α Store</title>
          <meta name="description" content="درگاه پرداخت امن α Store" />
        </Head>
        
        <div className="min-h-screen bg-gray-50 py-8">
          <div className="container mx-auto px-4">
            <PaymentGateway
              gateway={selectedGateway}
              amount={totalAmount}
              currency={currency}
              orderId={orderId}
              paymentUrl={paymentUrl}
              onCancel={handleCancelPayment}
              onTimeout={handleGatewayTimeout}
              timeoutMinutes={15}
            />
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>پرداخت - α Store</title>
        <meta name="description" content="انتخاب روش پرداخت برای سفارش شما" />
      </Head>
      
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          {/* Page Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-8"
          >
            <h1 className="text-3xl font-bold text-gray-900 mb-4">
              تکمیل سفارش
            </h1>
            <div className="flex items-center justify-center gap-2 text-sm text-gray-600">
              <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full">
                ✓ انتخاب محصولات
              </span>
              <span className="w-8 h-px bg-gray-300"></span>
              <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full">
                → پرداخت
              </span>
              <span className="w-8 h-px bg-gray-300"></span>
              <span className="px-3 py-1 bg-gray-100 text-gray-600 rounded-full">
                تکمیل سفارش
              </span>
            </div>
          </motion.div>

          {/* Cart Summary */}
          {cartItems.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="max-w-2xl mx-auto mb-8 p-4 bg-white rounded-lg shadow"
              dir="rtl"
            >
              <h3 className="font-medium text-gray-900 mb-3">
                خلاصه سفارش ({cartItems.length} کالا)
              </h3>
              <div className="space-y-2 max-h-32 overflow-y-auto">
                {cartItems.map((item) => (
                  <div key={item.id} className="flex justify-between items-center text-sm">
                    <span className="text-gray-700">
                      {item.name} × {item.quantity}
                    </span>
                    <span className="font-medium">
                      {(item.price * item.quantity).toLocaleString('fa-IR')} تومان
                    </span>
                  </div>
                ))}
              </div>
              <div className="border-t mt-3 pt-3 flex justify-between font-bold">
                <span>مجموع:</span>
                <span className="text-purple-600">
                  {totalAmount.toLocaleString('fa-IR')} تومان
                </span>
              </div>
            </motion.div>
          )}

          {/* Payment Methods */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <PaymentMethods
              gateways={gateways}
              selectedGateway={selectedGateway}
              amount={totalAmount}
              currency={currency}
              isLoading={isLoading}
              isProcessing={isProcessing}
              error={error}
              onGatewaySelect={selectGateway}
              onSubmitPayment={handleSubmitPayment}
              onClearError={clearError}
            />
          </motion.div>

          {/* Retry Button */}
          {error && error.retryable && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-center mt-6"
            >
              <button
                onClick={handleRetry}
                className="px-6 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
              >
                تلاش مجدد
              </button>
            </motion.div>
          )}
        </div>
      </div>
    </>
  );
};

export default PaymentPage;
// src/components/payment/PaymentGateway.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { ArrowLeft, Loader2, AlertCircle, Shield } from 'lucide-react';
import { PaymentGateway as PaymentGatewayType } from '../../types/payment';
import { formatCurrency } from '../../utils/payment';

interface PaymentGatewayProps {
  gateway: PaymentGatewayType;
  amount: number;
  currency: 'IRR' | 'IRT';
  orderId: string;
  paymentUrl?: string;
  onCancel?: () => void;
  onTimeout?: () => void;
  timeoutMinutes?: number;
}

const PaymentGateway: React.FC<PaymentGatewayProps> = ({
  gateway,
  amount,
  currency,
  orderId,
  paymentUrl,
  onCancel,
  onTimeout,
  timeoutMinutes = 15
}) => {
  const [timeLeft, setTimeLeft] = useState(timeoutMinutes * 60);
  const [isRedirecting, setIsRedirecting] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          onTimeout?.();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [onTimeout]);

  useEffect(() => {
    if (paymentUrl && !isRedirecting) {
      setIsRedirecting(true);
      // Small delay to show the redirect message
      setTimeout(() => {
        window.location.href = paymentUrl;
      }, 2000);
    }
  }, [paymentUrl, isRedirecting]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getProgressPercentage = () => {
    const totalSeconds = timeoutMinutes * 60;
    return ((totalSeconds - timeLeft) / totalSeconds) * 100;
  };

  return (
    <div className="max-w-lg mx-auto p-6 bg-white rounded-lg shadow-lg" dir="rtl">
      {/* Header */}
      <div className="text-center mb-8">
        <div className="flex items-center justify-center w-16 h-16 bg-gradient-to-r from-purple-500 to-blue-600 rounded-full mx-auto mb-4">
          <img
            src={gateway.logo}
            alt={gateway.namePersian}
            className="w-10 h-10 object-contain"
            onError={(e) => {
              (e.target as HTMLImageElement).style.display = 'none';
            }}
          />
          <Shield className="w-8 h-8 text-white" style={{ display: 'none' }} />
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          انتقال به {gateway.namePersian}
        </h2>
        <p className="text-gray-600">
          در حال انتقال به درگاه پرداخت امن...
        </p>
      </div>

      {/* Payment Summary */}
      <div className="bg-gray-50 rounded-lg p-4 mb-6">
        <h3 className="font-medium text-gray-900 mb-3">جزئیات پرداخت</h3>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span className="text-gray-600">شماره سفارش:</span>
            <span className="font-medium">{orderId}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">درگاه پرداخت:</span>
            <span className="font-medium">{gateway.namePersian}</span>
          </div>
          <div className="border-t pt-2 flex justify-between text-lg font-bold">
            <span>مبلغ قابل پرداخت:</span>
            <span className="text-purple-600">{formatCurrency(amount, currency)}</span>
          </div>
        </div>
      </div>

      {/* Timer */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-gray-600">زمان باقی‌مانده:</span>
          <span className={`text-lg font-mono ${timeLeft < 300 ? 'text-red-600' : 'text-gray-900'}`}>
            {formatTime(timeLeft)}
          </span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <motion.div
            className={`h-2 rounded-full ${timeLeft < 300 ? 'bg-red-500' : 'bg-purple-500'}`}
            initial={{ width: 0 }}
            animate={{ width: `${getProgressPercentage()}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
        {timeLeft < 300 && (
          <p className="text-red-600 text-sm mt-1 text-center">
            زمان شما رو به اتمام است!
          </p>
        )}
      </div>

      {/* Status Messages */}
      <div className="space-y-4 mb-6">
        {isRedirecting ? (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex items-center justify-center gap-3 p-4 bg-blue-50 border border-blue-200 rounded-lg"
          >
            <Loader2 className="w-5 h-5 text-blue-600 animate-spin" />
            <span className="text-blue-800">در حال انتقال به درگاه پرداخت...</span>
          </motion.div>
        ) : paymentUrl ? (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center"
          >
            <p className="text-gray-700 mb-4">
              اگر به‌طور خودکار منتقل نشدید، روی دکمه زیر کلیک کنید:
            </p>
            <motion.a
              href={paymentUrl}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:shadow-lg transition-all"
            >
              <span>ادامه پرداخت</span>
              <ArrowLeft className="w-4 h-4" />
            </motion.a>
          </motion.div>
        ) : (
          <div className="flex items-center gap-3 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <Loader2 className="w-5 h-5 text-yellow-600 animate-spin" />
            <span className="text-yellow-800">در حال تولید لینک پرداخت...</span>
          </div>
        )}
      </div>

      {/* Security Information */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
        <div className="flex items-start gap-3">
          <Shield className="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" />
          <div className="text-sm">
            <h4 className="font-medium text-green-800 mb-1">پرداخت امن</h4>
            <p className="text-green-700 leading-relaxed">
              تمام اطلاعات شما با بالاترین استانداردهای امنیتی محافظت می‌شود. 
              هیچ اطلاعات حساسی در سرورهای ما ذخیره نمی‌شود.
            </p>
          </div>
        </div>
      </div>

      {/* Important Notes */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <h4 className="font-medium text-blue-800 mb-2">نکات مهم:</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>• صفحه مرورگر را بستن ندهید</li>
          <li>• دکمه بازگشت مرورگر را فشار ندهید</li>
          <li>• تا تکمیل پرداخت منتظر بمانید</li>
          <li>• در صورت قطع اینترنت، مجدداً تلاش کنید</li>
        </ul>
      </div>

      {/* Cancel Button */}
      {onCancel && (
        <div className="text-center">
          <button
            onClick={onCancel}
            className="text-gray-600 hover:text-gray-800 text-sm underline transition-colors"
          >
            انصراف از پرداخت
          </button>
        </div>
      )}

      {/* Timeout Warning */}
      {timeLeft === 0 && (
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        >
          <div className="bg-white p-6 rounded-lg max-w-sm mx-4 text-center">
            <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-bold text-gray-900 mb-2">
              زمان پرداخت به پایان رسید
            </h3>
            <p className="text-gray-600 mb-4">
              مهلت پرداخت منقضی شده است. لطفاً مجدداً تلاش کنید.
            </p>
            <button
              onClick={onTimeout}
              className="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              بازگشت
            </button>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default PaymentGateway;